
Hethongtuoi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004834  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b8  080049b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080049b8  080049b8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049b8  080049b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080049c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000074  08004a34  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08004a34  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f748  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e9  00000000  00000000  0002f828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00031918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c71  00000000  00000000  000328d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b2c  00000000  00000000  00033541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d8c  00000000  00000000  0004c06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091afa  00000000  00000000  0005edf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000487c  00000000  00000000  000f08f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f5170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004928 	.word	0x08004928

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004928 	.word	0x08004928

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_f2iz>:
 8000368:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800036c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000370:	d30f      	bcc.n	8000392 <__aeabi_f2iz+0x2a>
 8000372:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000376:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800037a:	d90d      	bls.n	8000398 <__aeabi_f2iz+0x30>
 800037c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000384:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000388:	fa23 f002 	lsr.w	r0, r3, r2
 800038c:	bf18      	it	ne
 800038e:	4240      	negne	r0, r0
 8000390:	4770      	bx	lr
 8000392:	f04f 0000 	mov.w	r0, #0
 8000396:	4770      	bx	lr
 8000398:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800039c:	d101      	bne.n	80003a2 <__aeabi_f2iz+0x3a>
 800039e:	0242      	lsls	r2, r0, #9
 80003a0:	d105      	bne.n	80003ae <__aeabi_f2iz+0x46>
 80003a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80003a6:	bf08      	it	eq
 80003a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80003ac:	4770      	bx	lr
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	4770      	bx	lr

080003b4 <lcd_i2c_init>:

#include "lcd_i2c.h"


void lcd_i2c_init(LCD_I2C_HandleTypeDef *p_LCD, I2C_HandleTypeDef *p_hi2c, uint8_t p_col, uint8_t p_row, uint8_t p_Slave_Address)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	4611      	mov	r1, r2
 80003c0:	461a      	mov	r2, r3
 80003c2:	460b      	mov	r3, r1
 80003c4:	71fb      	strb	r3, [r7, #7]
 80003c6:	4613      	mov	r3, r2
 80003c8:	71bb      	strb	r3, [r7, #6]
	p_LCD->SLAVE_ADDRESS = p_Slave_Address;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	7e3a      	ldrb	r2, [r7, #24]
 80003ce:	709a      	strb	r2, [r3, #2]
	p_LCD->LCD_Backlight_Value = lcd_backlight_on;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	2208      	movs	r2, #8
 80003d4:	70da      	strb	r2, [r3, #3]
	p_LCD->LCD_Columns = p_col;
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	79fa      	ldrb	r2, [r7, #7]
 80003da:	701a      	strb	r2, [r3, #0]
	p_LCD->LCD_Rows = p_row;
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	79ba      	ldrb	r2, [r7, #6]
 80003e0:	705a      	strb	r2, [r3, #1]
	p_LCD->hi2c = p_hi2c;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	68ba      	ldr	r2, [r7, #8]
 80003e6:	609a      	str	r2, [r3, #8]
	p_LCD->LCD_Display_Option = lcd_display_on | lcd_cursor_off | lcd_blinkOff;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	2204      	movs	r2, #4
 80003ec:	711a      	strb	r2, [r3, #4]


	//4 bit initialization
	HAL_Delay(40); 	//waiting for > 40ms
 80003ee:	2028      	movs	r0, #40	; 0x28
 80003f0:	f000 fe82 	bl	80010f8 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 80003f4:	2130      	movs	r1, #48	; 0x30
 80003f6:	68f8      	ldr	r0, [r7, #12]
 80003f8:	f000 f847 	bl	800048a <lcd_send_cmd>
	HAL_Delay(5);  // waiting for >4.1ms
 80003fc:	2005      	movs	r0, #5
 80003fe:	f000 fe7b 	bl	80010f8 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 8000402:	2130      	movs	r1, #48	; 0x30
 8000404:	68f8      	ldr	r0, [r7, #12]
 8000406:	f000 f840 	bl	800048a <lcd_send_cmd>
	HAL_Delay(1);  // waiting for >100us
 800040a:	2001      	movs	r0, #1
 800040c:	f000 fe74 	bl	80010f8 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 8000410:	2130      	movs	r1, #48	; 0x30
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f000 f839 	bl	800048a <lcd_send_cmd>
	HAL_Delay(10);
 8000418:	200a      	movs	r0, #10
 800041a:	f000 fe6d 	bl	80010f8 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x20);	//4 bit mode
 800041e:	2120      	movs	r1, #32
 8000420:	68f8      	ldr	r0, [r7, #12]
 8000422:	f000 f832 	bl	800048a <lcd_send_cmd>
	HAL_Delay(10);
 8000426:	200a      	movs	r0, #10
 8000428:	f000 fe66 	bl	80010f8 <HAL_Delay>

	//display initialization
	lcd_send_cmd(p_LCD, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800042c:	2128      	movs	r1, #40	; 0x28
 800042e:	68f8      	ldr	r0, [r7, #12]
 8000430:	f000 f82b 	bl	800048a <lcd_send_cmd>
	HAL_Delay(1);
 8000434:	2001      	movs	r0, #1
 8000436:	f000 fe5f 	bl	80010f8 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off		HAL_Delay(1);
 800043a:	2108      	movs	r1, #8
 800043c:	68f8      	ldr	r0, [r7, #12]
 800043e:	f000 f824 	bl	800048a <lcd_send_cmd>
	HAL_Delay(1);
 8000442:	2001      	movs	r0, #1
 8000444:	f000 fe58 	bl	80010f8 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x01);  // clear display
 8000448:	2101      	movs	r1, #1
 800044a:	68f8      	ldr	r0, [r7, #12]
 800044c:	f000 f81d 	bl	800048a <lcd_send_cmd>
	HAL_Delay(1);
 8000450:	2001      	movs	r0, #1
 8000452:	f000 fe51 	bl	80010f8 <HAL_Delay>
	HAL_Delay(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f000 fe4e 	bl	80010f8 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800045c:	2106      	movs	r1, #6
 800045e:	68f8      	ldr	r0, [r7, #12]
 8000460:	f000 f813 	bl	800048a <lcd_send_cmd>
	HAL_Delay(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f000 fe47 	bl	80010f8 <HAL_Delay>
	lcd_send_cmd(p_LCD, lcd_displaycontrol | p_LCD -> LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	791b      	ldrb	r3, [r3, #4]
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	b2db      	uxtb	r3, r3
 8000474:	4619      	mov	r1, r3
 8000476:	68f8      	ldr	r0, [r7, #12]
 8000478:	f000 f807 	bl	800048a <lcd_send_cmd>
	HAL_Delay(1);
 800047c:	2001      	movs	r0, #1
 800047e:	f000 fe3b 	bl	80010f8 <HAL_Delay>
}
 8000482:	bf00      	nop
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <lcd_send_cmd>:

void lcd_send_cmd (LCD_I2C_HandleTypeDef *p_lcd, char cmd)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b086      	sub	sp, #24
 800048e:	af02      	add	r7, sp, #8
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	460b      	mov	r3, r1
 8000494:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd & 0xf0);
 8000496:	78fb      	ldrb	r3, [r7, #3]
 8000498:	f023 030f 	bic.w	r3, r3, #15
 800049c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4) & 0xf0);
 800049e:	78fb      	ldrb	r3, [r7, #3]
 80004a0:	011b      	lsls	r3, r3, #4
 80004a2:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0C;	//en=1, rs=0
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	f043 030c 	orr.w	r3, r3, #12
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x08;	//en=0, rs=0
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	f043 0308 	orr.w	r3, r3, #8
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	//en=1, rs=0
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	f043 030c 	orr.w	r3, r3, #12
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	//en=0, rs=1
 80004c2:	7bbb      	ldrb	r3, [r7, #14]
 80004c4:	f043 0308 	orr.w	r3, r3, #8
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, data_t, 4, 100);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6898      	ldr	r0, [r3, #8]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	789b      	ldrb	r3, [r3, #2]
 80004d4:	b299      	uxth	r1, r3
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2304      	movs	r3, #4
 80004e0:	f001 fd00 	bl	8001ee4 <HAL_I2C_Master_Transmit>
}
 80004e4:	bf00      	nop
 80004e6:	3710      	adds	r7, #16
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <lcd_send_data>:

void lcd_send_data (LCD_I2C_HandleTypeDef *p_LCD, char data)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (data & 0xf0);
 80004f8:	78fb      	ldrb	r3, [r7, #3]
 80004fa:	f023 030f 	bic.w	r3, r3, #15
 80004fe:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0D; //en=1, rs=0
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	f043 030d 	orr.w	r3, r3, #13
 800050c:	b2db      	uxtb	r3, r3
 800050e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x09; //en=0, rs=0
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	f043 0309 	orr.w	r3, r3, #9
 8000516:	b2db      	uxtb	r3, r3
 8000518:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 800051a:	7bbb      	ldrb	r3, [r7, #14]
 800051c:	f043 030d 	orr.w	r3, r3, #13
 8000520:	b2db      	uxtb	r3, r3
 8000522:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8000524:	7bbb      	ldrb	r3, [r7, #14]
 8000526:	f043 0309 	orr.w	r3, r3, #9
 800052a:	b2db      	uxtb	r3, r3
 800052c:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_LCD -> hi2c, p_LCD->SLAVE_ADDRESS, data_t, 4, 100);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6898      	ldr	r0, [r3, #8]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	789b      	ldrb	r3, [r3, #2]
 8000536:	b299      	uxth	r1, r3
 8000538:	f107 0208 	add.w	r2, r7, #8
 800053c:	2364      	movs	r3, #100	; 0x64
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	2304      	movs	r3, #4
 8000542:	f001 fccf 	bl	8001ee4 <HAL_I2C_Master_Transmit>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <lcd_set_cursor>:


void lcd_set_cursor(LCD_I2C_HandleTypeDef *p_LCD, uint8_t p_col, uint8_t p_row)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	70fb      	strb	r3, [r7, #3]
 800055c:	4613      	mov	r3, r2
 800055e:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <lcd_set_cursor+0x50>)
 8000562:	60fb      	str	r3, [r7, #12]
	if(p_row > p_LCD->LCD_Rows) p_row = p_LCD->LCD_Rows - 1;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	785b      	ldrb	r3, [r3, #1]
 8000568:	78ba      	ldrb	r2, [r7, #2]
 800056a:	429a      	cmp	r2, r3
 800056c:	d903      	bls.n	8000576 <lcd_set_cursor+0x26>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	785b      	ldrb	r3, [r3, #1]
 8000572:	3b01      	subs	r3, #1
 8000574:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(p_LCD, 0x80 | (p_col + t_row_Offets[p_row]));
 8000576:	78bb      	ldrb	r3, [r7, #2]
 8000578:	3310      	adds	r3, #16
 800057a:	443b      	add	r3, r7
 800057c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000580:	78fb      	ldrb	r3, [r7, #3]
 8000582:	4413      	add	r3, r2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	b25b      	sxtb	r3, r3
 8000588:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800058c:	b25b      	sxtb	r3, r3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	4619      	mov	r1, r3
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff ff79 	bl	800048a <lcd_send_cmd>
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	54144000 	.word	0x54144000

080005a4 <lcd_send_string>:

void lcd_send_string (LCD_I2C_HandleTypeDef *p_LCD, char *str)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data(p_LCD, *str++);
 80005ae:	e007      	b.n	80005c0 <lcd_send_string+0x1c>
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	603a      	str	r2, [r7, #0]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f7ff ff96 	bl	80004ec <lcd_send_data>
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f3      	bne.n	80005b0 <lcd_send_string+0xc>
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <lcd_clear>:

void lcd_clear (LCD_I2C_HandleTypeDef *p_LCD)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(p_LCD, lcd_cleardisplay);
 80005da:	2101      	movs	r1, #1
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff ff54 	bl	800048a <lcd_send_cmd>
	HAL_Delay(5);
 80005e2:	2005      	movs	r0, #5
 80005e4:	f000 fd88 	bl	80010f8 <HAL_Delay>
	lcd_set_cursor(p_LCD, 0, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ffaf 	bl	8000550 <lcd_set_cursor>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fd17 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f947 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 fadf 	bl	8000bcc <MX_GPIO_Init>
  MX_I2C1_Init();
 800060e:	f000 fa0f 	bl	8000a30 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000612:	f000 f991 	bl	8000938 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000616:	f000 f9cd 	bl	80009b4 <MX_ADC2_Init>
  MX_TIM2_Init();
 800061a:	f000 fa37 	bl	8000a8c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800061e:	f000 faab 	bl	8000b78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
uint32_t timer = HAL_GetTick();
 8000622:	f000 fd5f 	bl	80010e4 <HAL_GetTick>
 8000626:	6078      	str	r0, [r7, #4]
HAL_ADC_Start(&hadc1);
 8000628:	4888      	ldr	r0, [pc, #544]	; (800084c <main+0x250>)
 800062a:	f000 fe61 	bl	80012f0 <HAL_ADC_Start>
HAL_ADC_Start(&hadc2);
 800062e:	4888      	ldr	r0, [pc, #544]	; (8000850 <main+0x254>)
 8000630:	f000 fe5e 	bl	80012f0 <HAL_ADC_Start>
lcd_i2c_init(&h_lcd, &hi2c1, 16, 2, 0x27<<1);
 8000634:	234e      	movs	r3, #78	; 0x4e
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2302      	movs	r3, #2
 800063a:	2210      	movs	r2, #16
 800063c:	4985      	ldr	r1, [pc, #532]	; (8000854 <main+0x258>)
 800063e:	4886      	ldr	r0, [pc, #536]	; (8000858 <main+0x25c>)
 8000640:	f7ff feb8 	bl	80003b4 <lcd_i2c_init>
HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000644:	2104      	movs	r1, #4
 8000646:	4885      	ldr	r0, [pc, #532]	; (800085c <main+0x260>)
 8000648:	f002 fd12 	bl	8003070 <HAL_TIM_PWM_Start_IT>
HAL_UART_Receive_IT(&huart1,&Rx_data,1);
 800064c:	2201      	movs	r2, #1
 800064e:	4984      	ldr	r1, [pc, #528]	; (8000860 <main+0x264>)
 8000650:	4884      	ldr	r0, [pc, #528]	; (8000864 <main+0x268>)
 8000652:	f003 fb5c 	bl	8003d0e <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
/*Xử lí số liệu của cảm biến*/
	  sensor_1 = (float)HAL_ADC_GetValue(&hadc1);
 8000656:	487d      	ldr	r0, [pc, #500]	; (800084c <main+0x250>)
 8000658:	f000 fef8 	bl	800144c <HAL_ADC_GetValue>
 800065c:	4603      	mov	r3, r0
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fe2a 	bl	80002b8 <__aeabi_ui2f>
 8000664:	4603      	mov	r3, r0
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fe7e 	bl	8000368 <__aeabi_f2iz>
 800066c:	4603      	mov	r3, r0
 800066e:	4a7e      	ldr	r2, [pc, #504]	; (8000868 <main+0x26c>)
 8000670:	6013      	str	r3, [r2, #0]
	  sensor_2 = (float)HAL_ADC_GetValue(&hadc2);
 8000672:	4877      	ldr	r0, [pc, #476]	; (8000850 <main+0x254>)
 8000674:	f000 feea 	bl	800144c <HAL_ADC_GetValue>
 8000678:	4603      	mov	r3, r0
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fe1c 	bl	80002b8 <__aeabi_ui2f>
 8000680:	4603      	mov	r3, r0
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff fe70 	bl	8000368 <__aeabi_f2iz>
 8000688:	4603      	mov	r3, r0
 800068a:	4a78      	ldr	r2, [pc, #480]	; (800086c <main+0x270>)
 800068c:	6013      	str	r3, [r2, #0]
	  percent_1 = (sensor_1-1900)*100/(3100-1900);
 800068e:	4b76      	ldr	r3, [pc, #472]	; (8000868 <main+0x26c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8000696:	4a76      	ldr	r2, [pc, #472]	; (8000870 <main+0x274>)
 8000698:	fb82 1203 	smull	r1, r2, r2, r3
 800069c:	1052      	asrs	r2, r2, #1
 800069e:	17db      	asrs	r3, r3, #31
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	4a74      	ldr	r2, [pc, #464]	; (8000874 <main+0x278>)
 80006a4:	6013      	str	r3, [r2, #0]
	  percent_2 = (sensor_2-1900)*100/(3100-1900);
 80006a6:	4b71      	ldr	r3, [pc, #452]	; (800086c <main+0x270>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80006ae:	4a70      	ldr	r2, [pc, #448]	; (8000870 <main+0x274>)
 80006b0:	fb82 1203 	smull	r1, r2, r2, r3
 80006b4:	1052      	asrs	r2, r2, #1
 80006b6:	17db      	asrs	r3, r3, #31
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	4a6f      	ldr	r2, [pc, #444]	; (8000878 <main+0x27c>)
 80006bc:	6013      	str	r3, [r2, #0]
	  sprintf(string_1, "Sensor_1:%d",percent_1);
 80006be:	4b6d      	ldr	r3, [pc, #436]	; (8000874 <main+0x278>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	496d      	ldr	r1, [pc, #436]	; (800087c <main+0x280>)
 80006c6:	486e      	ldr	r0, [pc, #440]	; (8000880 <main+0x284>)
 80006c8:	f003 fc7c 	bl	8003fc4 <siprintf>
	  sprintf(string_2, "Sensor_2:%d",percent_2);
 80006cc:	4b6a      	ldr	r3, [pc, #424]	; (8000878 <main+0x27c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	496c      	ldr	r1, [pc, #432]	; (8000884 <main+0x288>)
 80006d4:	486c      	ldr	r0, [pc, #432]	; (8000888 <main+0x28c>)
 80006d6:	f003 fc75 	bl	8003fc4 <siprintf>

/*Hiển thị lên lcd*/
	  lcd_set_cursor(&h_lcd, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	485e      	ldr	r0, [pc, #376]	; (8000858 <main+0x25c>)
 80006e0:	f7ff ff36 	bl	8000550 <lcd_set_cursor>
	  lcd_send_string(&h_lcd, string_1);
 80006e4:	4966      	ldr	r1, [pc, #408]	; (8000880 <main+0x284>)
 80006e6:	485c      	ldr	r0, [pc, #368]	; (8000858 <main+0x25c>)
 80006e8:	f7ff ff5c 	bl	80005a4 <lcd_send_string>
	  lcd_set_cursor(&h_lcd, 0, 1);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2100      	movs	r1, #0
 80006f0:	4859      	ldr	r0, [pc, #356]	; (8000858 <main+0x25c>)
 80006f2:	f7ff ff2d 	bl	8000550 <lcd_set_cursor>
	  lcd_send_string(&h_lcd, string_2);
 80006f6:	4964      	ldr	r1, [pc, #400]	; (8000888 <main+0x28c>)
 80006f8:	4857      	ldr	r0, [pc, #348]	; (8000858 <main+0x25c>)
 80006fa:	f7ff ff53 	bl	80005a4 <lcd_send_string>
	  if(timer - HAL_GetTick() >= 500){
 80006fe:	f000 fcf1 	bl	80010e4 <HAL_GetTick>
 8000702:	4602      	mov	r2, r0
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800070c:	d305      	bcc.n	800071a <main+0x11e>
	  lcd_clear(&h_lcd);
 800070e:	4852      	ldr	r0, [pc, #328]	; (8000858 <main+0x25c>)
 8000710:	f7ff ff5f 	bl	80005d2 <lcd_clear>
	  timer = HAL_GetTick();
 8000714:	f000 fce6 	bl	80010e4 <HAL_GetTick>
 8000718:	6078      	str	r0, [r7, #4]
	  }
/*Các trạng thái của máy bơm*/
switch (state){
 800071a:	4b5c      	ldr	r3, [pc, #368]	; (800088c <main+0x290>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b05      	cmp	r3, #5
 8000720:	f200 8091 	bhi.w	8000846 <main+0x24a>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <main+0x130>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	080007c7 	.word	0x080007c7
 8000730:	0800081b 	.word	0x0800081b
 8000734:	08000825 	.word	0x08000825
 8000738:	08000831 	.word	0x08000831
 800073c:	0800083d 	.word	0x0800083d
 8000740:	08000745 	.word	0x08000745
case DATA:
/*Hiển thị dữ liệu lên uart*/
	if(timer - HAL_GetTick() >= 500)
 8000744:	f000 fcce 	bl	80010e4 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000752:	d338      	bcc.n	80007c6 <main+0x1ca>
	{
	HAL_UART_Transmit(&huart1, (uint8_t *)string_1, sizeof(string_1), 100);
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	2214      	movs	r2, #20
 8000758:	4949      	ldr	r1, [pc, #292]	; (8000880 <main+0x284>)
 800075a:	4842      	ldr	r0, [pc, #264]	; (8000864 <main+0x268>)
 800075c:	f003 fa54 	bl	8003c08 <HAL_UART_Transmit>
	if(percent_1 >= 85)
 8000760:	4b44      	ldr	r3, [pc, #272]	; (8000874 <main+0x278>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b54      	cmp	r3, #84	; 0x54
 8000766:	dd06      	ble.n	8000776 <main+0x17a>
	{
	HAL_UART_Transmit(&huart1, (uint8_t *)data_1, sizeof(data_1), 100);
 8000768:	2364      	movs	r3, #100	; 0x64
 800076a:	2207      	movs	r2, #7
 800076c:	4948      	ldr	r1, [pc, #288]	; (8000890 <main+0x294>)
 800076e:	483d      	ldr	r0, [pc, #244]	; (8000864 <main+0x268>)
 8000770:	f003 fa4a 	bl	8003c08 <HAL_UART_Transmit>
 8000774:	e009      	b.n	800078a <main+0x18e>
	}
	else if (percent_1 < 85)
 8000776:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <main+0x278>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b54      	cmp	r3, #84	; 0x54
 800077c:	dc05      	bgt.n	800078a <main+0x18e>
	{
	HAL_UART_Transmit(&huart1, (uint8_t *)data_2, sizeof(data_2), 100);
 800077e:	2364      	movs	r3, #100	; 0x64
 8000780:	220d      	movs	r2, #13
 8000782:	4944      	ldr	r1, [pc, #272]	; (8000894 <main+0x298>)
 8000784:	4837      	ldr	r0, [pc, #220]	; (8000864 <main+0x268>)
 8000786:	f003 fa3f 	bl	8003c08 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)string_2, sizeof(string_2), 100);
 800078a:	2364      	movs	r3, #100	; 0x64
 800078c:	2214      	movs	r2, #20
 800078e:	493e      	ldr	r1, [pc, #248]	; (8000888 <main+0x28c>)
 8000790:	4834      	ldr	r0, [pc, #208]	; (8000864 <main+0x268>)
 8000792:	f003 fa39 	bl	8003c08 <HAL_UART_Transmit>
	if(percent_2 >= 85)
 8000796:	4b38      	ldr	r3, [pc, #224]	; (8000878 <main+0x27c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b54      	cmp	r3, #84	; 0x54
 800079c:	dd06      	ble.n	80007ac <main+0x1b0>
	{
	HAL_UART_Transmit(&huart1, (uint8_t *)data_1, sizeof(data_1), 100);
 800079e:	2364      	movs	r3, #100	; 0x64
 80007a0:	2207      	movs	r2, #7
 80007a2:	493b      	ldr	r1, [pc, #236]	; (8000890 <main+0x294>)
 80007a4:	482f      	ldr	r0, [pc, #188]	; (8000864 <main+0x268>)
 80007a6:	f003 fa2f 	bl	8003c08 <HAL_UART_Transmit>
 80007aa:	e009      	b.n	80007c0 <main+0x1c4>
	}
	else if (percent_2 < 85)
 80007ac:	4b32      	ldr	r3, [pc, #200]	; (8000878 <main+0x27c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b54      	cmp	r3, #84	; 0x54
 80007b2:	dc05      	bgt.n	80007c0 <main+0x1c4>
	{
	HAL_UART_Transmit(&huart1, (uint8_t *)data_2, sizeof(data_2), 100);
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	220d      	movs	r2, #13
 80007b8:	4936      	ldr	r1, [pc, #216]	; (8000894 <main+0x298>)
 80007ba:	482a      	ldr	r0, [pc, #168]	; (8000864 <main+0x268>)
 80007bc:	f003 fa24 	bl	8003c08 <HAL_UART_Transmit>
	}
	timer = HAL_GetTick();
 80007c0:	f000 fc90 	bl	80010e4 <HAL_GetTick>
 80007c4:	6078      	str	r0, [r7, #4]
	}
case AUTOMATIC:
/*Bơm tự động*/
	if(percent_1 < percent_2 && percent_2 < 85)
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <main+0x278>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <main+0x27c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	da08      	bge.n	80007e4 <main+0x1e8>
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <main+0x27c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b54      	cmp	r3, #84	; 0x54
 80007d8:	dc04      	bgt.n	80007e4 <main+0x1e8>
	{
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 400);
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <main+0x260>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80007e2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(percent_1 > percent_2 && percent_1 < 85)
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <main+0x278>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <main+0x27c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dd08      	ble.n	8000802 <main+0x206>
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <main+0x278>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b54      	cmp	r3, #84	; 0x54
 80007f6:	dc04      	bgt.n	8000802 <main+0x206>
	{
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 625);
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <main+0x260>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f240 2271 	movw	r2, #625	; 0x271
 8000800:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(percent_1 >= 85 && percent_2 >= 85)
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <main+0x278>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b54      	cmp	r3, #84	; 0x54
 8000808:	dd07      	ble.n	800081a <main+0x21e>
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <main+0x27c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b54      	cmp	r3, #84	; 0x54
 8000810:	dd03      	ble.n	800081a <main+0x21e>
	{
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <main+0x260>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2200      	movs	r2, #0
 8000818:	639a      	str	r2, [r3, #56]	; 0x38
	}
case LOW:
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 100);
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <main+0x260>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2264      	movs	r2, #100	; 0x64
 8000820:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8000822:	e011      	b.n	8000848 <main+0x24c>
case MEDIUM:
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 400);
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <main+0x260>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800082c:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 800082e:	e00b      	b.n	8000848 <main+0x24c>
case HIGH:
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 625);
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <main+0x260>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f240 2271 	movw	r2, #625	; 0x271
 8000838:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 800083a:	e005      	b.n	8000848 <main+0x24c>
case OFF:
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <main+0x260>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2200      	movs	r2, #0
 8000842:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8000844:	e000      	b.n	8000848 <main+0x24c>
default:
	break;
 8000846:	bf00      	nop
	  sensor_1 = (float)HAL_ADC_GetValue(&hadc1);
 8000848:	e705      	b.n	8000656 <main+0x5a>
 800084a:	bf00      	nop
 800084c:	20000090 	.word	0x20000090
 8000850:	200000c0 	.word	0x200000c0
 8000854:	200000f0 	.word	0x200000f0
 8000858:	200001d4 	.word	0x200001d4
 800085c:	20000144 	.word	0x20000144
 8000860:	200001e0 	.word	0x200001e0
 8000864:	2000018c 	.word	0x2000018c
 8000868:	200001e4 	.word	0x200001e4
 800086c:	200001e8 	.word	0x200001e8
 8000870:	2aaaaaab 	.word	0x2aaaaaab
 8000874:	200001ec 	.word	0x200001ec
 8000878:	200001f0 	.word	0x200001f0
 800087c:	08004940 	.word	0x08004940
 8000880:	200001f4 	.word	0x200001f4
 8000884:	0800494c 	.word	0x0800494c
 8000888:	20000208 	.word	0x20000208
 800088c:	2000021c 	.word	0x2000021c
 8000890:	20000000 	.word	0x20000000
 8000894:	20000008 	.word	0x20000008

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a2:	2228      	movs	r2, #40	; 0x28
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fbac 	bl	8004004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c8:	2302      	movs	r3, #2
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d0:	2310      	movs	r3, #16
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fe59 	bl	8002594 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x54>
  {
    Error_Handler();
 80008e8:	f000 f992 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f002 f8c6 	bl	8002a98 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000912:	f000 f97d 	bl	8000c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000916:	2302      	movs	r3, #2
 8000918:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fa47 	bl	8002db4 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800092c:	f000 f970 	bl	8000c10 <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	3750      	adds	r7, #80	; 0x50
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_ADC1_Init+0x74>)
 800094a:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <MX_ADC1_Init+0x78>)
 800094c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_ADC1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_ADC1_Init+0x74>)
 8000956:	2201      	movs	r2, #1
 8000958:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_ADC1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_ADC1_Init+0x74>)
 8000962:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000966:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_ADC1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_ADC1_Init+0x74>)
 8000970:	2201      	movs	r2, #1
 8000972:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_ADC1_Init+0x74>)
 8000976:	f000 fbe3 	bl	8001140 <HAL_ADC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000980:	f000 f946 	bl	8000c10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000988:	2301      	movs	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_ADC1_Init+0x74>)
 8000996:	f000 fd65 	bl	8001464 <HAL_ADC_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80009a0:	f000 f936 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000090 	.word	0x20000090
 80009b0:	40012400 	.word	0x40012400

080009b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_ADC2_Init+0x74>)
 80009c6:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <MX_ADC2_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_ADC2_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_ADC2_Init+0x74>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_ADC2_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_ADC2_Init+0x74>)
 80009de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009e2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_ADC2_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_ADC2_Init+0x74>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_ADC2_Init+0x74>)
 80009f2:	f000 fba5 	bl	8001140 <HAL_ADC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80009fc:	f000 f908 	bl	8000c10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_ADC2_Init+0x74>)
 8000a12:	f000 fd27 	bl	8001464 <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000a1c:	f000 f8f8 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200000c0 	.word	0x200000c0
 8000a2c:	40012800 	.word	0x40012800

08000a30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a36:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <MX_I2C1_Init+0x54>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a3c:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_I2C1_Init+0x58>)
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a6e:	f001 f8f5 	bl	8001c5c <HAL_I2C_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a78:	f000 f8ca 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000f0 	.word	0x200000f0
 8000a84:	40005400 	.word	0x40005400
 8000a88:	000186a0 	.word	0x000186a0

08000a8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	f107 0320 	add.w	r3, r7, #32
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	615a      	str	r2, [r3, #20]
 8000aba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <MX_TIM2_Init+0xe8>)
 8000abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <MX_TIM2_Init+0xe8>)
 8000ac6:	227f      	movs	r2, #127	; 0x7f
 8000ac8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <MX_TIM2_Init+0xe8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <MX_TIM2_Init+0xe8>)
 8000ad2:	f240 2271 	movw	r2, #625	; 0x271
 8000ad6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <MX_TIM2_Init+0xe8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <MX_TIM2_Init+0xe8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae4:	4823      	ldr	r0, [pc, #140]	; (8000b74 <MX_TIM2_Init+0xe8>)
 8000ae6:	f002 fa1b 	bl	8002f20 <HAL_TIM_Base_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000af0:	f000 f88e 	bl	8000c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000afe:	4619      	mov	r1, r3
 8000b00:	481c      	ldr	r0, [pc, #112]	; (8000b74 <MX_TIM2_Init+0xe8>)
 8000b02:	f002 fc67 	bl	80033d4 <HAL_TIM_ConfigClockSource>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b0c:	f000 f880 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b10:	4818      	ldr	r0, [pc, #96]	; (8000b74 <MX_TIM2_Init+0xe8>)
 8000b12:	f002 fa54 	bl	8002fbe <HAL_TIM_PWM_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b1c:	f000 f878 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b28:	f107 0320 	add.w	r3, r7, #32
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4811      	ldr	r0, [pc, #68]	; (8000b74 <MX_TIM2_Init+0xe8>)
 8000b30:	f002 ffbc 	bl	8003aac <HAL_TIMEx_MasterConfigSynchronization>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b3a:	f000 f869 	bl	8000c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3e:	2360      	movs	r3, #96	; 0x60
 8000b40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2204      	movs	r2, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <MX_TIM2_Init+0xe8>)
 8000b56:	f002 fb7b 	bl	8003250 <HAL_TIM_PWM_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b60:	f000 f856 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <MX_TIM2_Init+0xe8>)
 8000b66:	f000 f94b 	bl	8000e00 <HAL_TIM_MspPostInit>

}
 8000b6a:	bf00      	nop
 8000b6c:	3738      	adds	r7, #56	; 0x38
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000144 	.word	0x20000144

08000b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <MX_USART1_UART_Init+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	f002 ffda 	bl	8003b68 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bba:	f000 f829 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000018c 	.word	0x2000018c
 8000bc8:	40013800 	.word	0x40013800

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_GPIO_Init+0x40>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <MX_GPIO_Init+0x40>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6193      	str	r3, [r2, #24]
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_GPIO_Init+0x40>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_GPIO_Init+0x40>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <MX_GPIO_Init+0x40>)
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	6193      	str	r3, [r2, #24]
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <MX_GPIO_Init+0x40>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40021000 	.word	0x40021000

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	61d3      	str	r3, [r2, #28]
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_MspInit+0x60>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_MspInit+0x60>)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000

08000c80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0318 	add.w	r3, r7, #24
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <HAL_ADC_MspInit+0xbc>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d122      	bne.n	8000ce6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <HAL_ADC_MspInit+0xc0>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <HAL_ADC_MspInit+0xc0>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <HAL_ADC_MspInit+0xc0>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HAL_ADC_MspInit+0xc0>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a20      	ldr	r2, [pc, #128]	; (8000d40 <HAL_ADC_MspInit+0xc0>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <HAL_ADC_MspInit+0xc0>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4819      	ldr	r0, [pc, #100]	; (8000d44 <HAL_ADC_MspInit+0xc4>)
 8000ce0:	f000 fe38 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ce4:	e026      	b.n	8000d34 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_ADC_MspInit+0xc8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d121      	bne.n	8000d34 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_ADC_MspInit+0xc0>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <HAL_ADC_MspInit+0xc0>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <HAL_ADC_MspInit+0xc0>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_ADC_MspInit+0xc0>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <HAL_ADC_MspInit+0xc0>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_ADC_MspInit+0xc0>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d24:	2303      	movs	r3, #3
 8000d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_ADC_MspInit+0xc4>)
 8000d30:	f000 fe10 	bl	8001954 <HAL_GPIO_Init>
}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40012400 	.word	0x40012400
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40012800 	.word	0x40012800

08000d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <HAL_I2C_MspInit+0x70>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d123      	bne.n	8000db4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d84:	23c0      	movs	r3, #192	; 0xc0
 8000d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <HAL_I2C_MspInit+0x78>)
 8000d98:	f000 fddc 	bl	8001954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000da2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da6:	61d3      	str	r3, [r2, #28]
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd8:	d10b      	bne.n	8000df2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_TIM_Base_MspInit+0x34>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_TIM_Base_MspInit+0x34>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_TIM_Base_MspInit+0x34>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e1e:	d129      	bne.n	8000e74 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_TIM_MspPostInit+0x7c>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <HAL_TIM_MspPostInit+0x7c>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_TIM_MspPostInit+0x7c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480d      	ldr	r0, [pc, #52]	; (8000e80 <HAL_TIM_MspPostInit+0x80>)
 8000e4c:	f000 fd82 	bl	8001954 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_TIM_MspPostInit+0x84>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <HAL_TIM_MspPostInit+0x84>)
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010c00 	.word	0x40010c00
 8000e84:	40010000 	.word	0x40010000

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <HAL_UART_MspInit+0x8c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d131      	bne.n	8000f0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <HAL_UART_MspInit+0x90>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <HAL_UART_MspInit+0x90>)
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_UART_MspInit+0x90>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_UART_MspInit+0x90>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_UART_MspInit+0x90>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_UART_MspInit+0x90>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000edc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4619      	mov	r1, r3
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <HAL_UART_MspInit+0x94>)
 8000eee:	f000 fd31 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4619      	mov	r1, r3
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_UART_MspInit+0x94>)
 8000f08:	f000 fd24 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40013800 	.word	0x40013800
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010800 	.word	0x40010800

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f66:	f000 f8ab 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f003 f838 	bl	8004014 <__errno>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <_sbrk+0x64>)
 8000fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20005000 	.word	0x20005000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	20000220 	.word	0x20000220
 8000fd8:	20000370 	.word	0x20000370

08000fdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe8:	f7ff fff8 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fee:	490c      	ldr	r1, [pc, #48]	; (8001020 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a09      	ldr	r2, [pc, #36]	; (8001028 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001004:	4c09      	ldr	r4, [pc, #36]	; (800102c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001012:	f003 f805 	bl	8004020 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001016:	f7ff faf1 	bl	80005fc <main>
  bx lr
 800101a:	4770      	bx	lr
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001024:	080049c0 	.word	0x080049c0
  ldr r2, =_sbss
 8001028:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800102c:	20000370 	.word	0x20000370

08001030 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC1_2_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_Init+0x28>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_Init+0x28>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 fc51 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104a:	200f      	movs	r0, #15
 800104c:	f000 f808 	bl	8001060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fde4 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40022000 	.word	0x40022000

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x54>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x58>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fc5b 	bl	800193a <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00e      	b.n	80010ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d80a      	bhi.n	80010aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f000 fc31 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_InitTick+0x5c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000018 	.word	0x20000018
 80010b8:	20000020 	.word	0x20000020
 80010bc:	2000001c 	.word	0x2000001c

080010c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_IncTick+0x1c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_IncTick+0x20>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a03      	ldr	r2, [pc, #12]	; (80010e0 <HAL_IncTick+0x20>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	20000020 	.word	0x20000020
 80010e0:	20000224 	.word	0x20000224

080010e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <HAL_GetTick+0x10>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	20000224 	.word	0x20000224

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff fff0 	bl	80010e4 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffe0 	bl	80010e4 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000020 	.word	0x20000020

08001140 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0be      	b.n	80012e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	2b00      	cmp	r3, #0
 800116e:	d109      	bne.n	8001184 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fd7e 	bl	8000c80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 fabf 	bl	8001708 <ADC_ConversionStop_Disable>
 800118a:	4603      	mov	r3, r0
 800118c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 8099 	bne.w	80012ce <HAL_ADC_Init+0x18e>
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f040 8095 	bne.w	80012ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ac:	f023 0302 	bic.w	r3, r3, #2
 80011b0:	f043 0202 	orr.w	r2, r3, #2
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7b1b      	ldrb	r3, [r3, #12]
 80011c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011d8:	d003      	beq.n	80011e2 <HAL_ADC_Init+0xa2>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d102      	bne.n	80011e8 <HAL_ADC_Init+0xa8>
 80011e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e6:	e000      	b.n	80011ea <HAL_ADC_Init+0xaa>
 80011e8:	2300      	movs	r3, #0
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7d1b      	ldrb	r3, [r3, #20]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d119      	bne.n	800122c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7b1b      	ldrb	r3, [r3, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d109      	bne.n	8001214 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	3b01      	subs	r3, #1
 8001206:	035a      	lsls	r2, r3, #13
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	e00b      	b.n	800122c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	f043 0220 	orr.w	r2, r3, #32
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	430a      	orrs	r2, r1
 800123e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <HAL_ADC_Init+0x1a8>)
 8001248:	4013      	ands	r3, r2
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	430b      	orrs	r3, r1
 8001252:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800125c:	d003      	beq.n	8001266 <HAL_ADC_Init+0x126>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d104      	bne.n	8001270 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	3b01      	subs	r3, #1
 800126c:	051b      	lsls	r3, r3, #20
 800126e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	430a      	orrs	r2, r1
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_ADC_Init+0x1ac>)
 800128c:	4013      	ands	r3, r2
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	429a      	cmp	r2, r3
 8001292:	d10b      	bne.n	80012ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f023 0303 	bic.w	r3, r3, #3
 80012a2:	f043 0201 	orr.w	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012aa:	e018      	b.n	80012de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	f023 0312 	bic.w	r3, r3, #18
 80012b4:	f043 0210 	orr.w	r2, r3, #16
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	f043 0201 	orr.w	r2, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012cc:	e007      	b.n	80012de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	f043 0210 	orr.w	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012de:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	ffe1f7fd 	.word	0xffe1f7fd
 80012ec:	ff1f0efe 	.word	0xff1f0efe

080012f0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_Start+0x1a>
 8001306:	2302      	movs	r3, #2
 8001308:	e098      	b.n	800143c <HAL_ADC_Start+0x14c>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f99e 	bl	8001654 <ADC_Enable>
 8001318:	4603      	mov	r3, r0
 800131a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 8087 	bne.w	8001432 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a41      	ldr	r2, [pc, #260]	; (8001444 <HAL_ADC_Start+0x154>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d105      	bne.n	800134e <HAL_ADC_Start+0x5e>
 8001342:	4b41      	ldr	r3, [pc, #260]	; (8001448 <HAL_ADC_Start+0x158>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d115      	bne.n	800137a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001364:	2b00      	cmp	r3, #0
 8001366:	d026      	beq.n	80013b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001370:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001378:	e01d      	b.n	80013b6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a2f      	ldr	r2, [pc, #188]	; (8001448 <HAL_ADC_Start+0x158>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d004      	beq.n	800139a <HAL_ADC_Start+0xaa>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a2b      	ldr	r2, [pc, #172]	; (8001444 <HAL_ADC_Start+0x154>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d10d      	bne.n	80013b6 <HAL_ADC_Start+0xc6>
 800139a:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <HAL_ADC_Start+0x158>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d007      	beq.n	80013b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c6:	f023 0206 	bic.w	r2, r3, #6
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80013ce:	e002      	b.n	80013d6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f06f 0202 	mvn.w	r2, #2
 80013e6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013f6:	d113      	bne.n	8001420 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013fc:	4a11      	ldr	r2, [pc, #68]	; (8001444 <HAL_ADC_Start+0x154>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d105      	bne.n	800140e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_ADC_Start+0x158>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800140a:	2b00      	cmp	r3, #0
 800140c:	d108      	bne.n	8001420 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	e00c      	b.n	800143a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	e003      	b.n	800143a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40012800 	.word	0x40012800
 8001448:	40012400 	.word	0x40012400

0800144c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x20>
 8001480:	2302      	movs	r3, #2
 8001482:	e0dc      	b.n	800163e <HAL_ADC_ConfigChannel+0x1da>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b06      	cmp	r3, #6
 8001492:	d81c      	bhi.n	80014ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b05      	subs	r3, #5
 80014a6:	221f      	movs	r2, #31
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4019      	ands	r1, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	3b05      	subs	r3, #5
 80014c0:	fa00 f203 	lsl.w	r2, r0, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34
 80014cc:	e03c      	b.n	8001548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	d81c      	bhi.n	8001510 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3b23      	subs	r3, #35	; 0x23
 80014e8:	221f      	movs	r2, #31
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	4019      	ands	r1, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	3b23      	subs	r3, #35	; 0x23
 8001502:	fa00 f203 	lsl.w	r2, r0, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
 800150e:	e01b      	b.n	8001548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b41      	subs	r3, #65	; 0x41
 8001522:	221f      	movs	r2, #31
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	4019      	ands	r1, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	3b41      	subs	r3, #65	; 0x41
 800153c:	fa00 f203 	lsl.w	r2, r0, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b09      	cmp	r3, #9
 800154e:	d91c      	bls.n	800158a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68d9      	ldr	r1, [r3, #12]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	3b1e      	subs	r3, #30
 8001562:	2207      	movs	r2, #7
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	4019      	ands	r1, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	6898      	ldr	r0, [r3, #8]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	3b1e      	subs	r3, #30
 800157c:	fa00 f203 	lsl.w	r2, r0, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	e019      	b.n	80015be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6919      	ldr	r1, [r3, #16]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	2207      	movs	r2, #7
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4019      	ands	r1, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6898      	ldr	r0, [r3, #8]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	fa00 f203 	lsl.w	r2, r0, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d003      	beq.n	80015ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ca:	2b11      	cmp	r3, #17
 80015cc:	d132      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <HAL_ADC_ConfigChannel+0x1e4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d125      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d126      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d11a      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_ADC_ConfigChannel+0x1e8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_ADC_ConfigChannel+0x1ec>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	0c9a      	lsrs	r2, r3, #18
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001614:	e002      	b.n	800161c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3b01      	subs	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x1b2>
 8001622:	e007      	b.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	f043 0220 	orr.w	r2, r3, #32
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40012400 	.word	0x40012400
 800164c:	20000018 	.word	0x20000018
 8001650:	431bde83 	.word	0x431bde83

08001654 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b01      	cmp	r3, #1
 8001670:	d040      	beq.n	80016f4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0201 	orr.w	r2, r2, #1
 8001680:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <ADC_Enable+0xac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <ADC_Enable+0xb0>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	0c9b      	lsrs	r3, r3, #18
 800168e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001690:	e002      	b.n	8001698 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3b01      	subs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f9      	bne.n	8001692 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800169e:	f7ff fd21 	bl	80010e4 <HAL_GetTick>
 80016a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016a4:	e01f      	b.n	80016e6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016a6:	f7ff fd1d 	bl	80010e4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d918      	bls.n	80016e6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d011      	beq.n	80016e6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	f043 0210 	orr.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e007      	b.n	80016f6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d1d8      	bne.n	80016a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000018 	.word	0x20000018
 8001704:	431bde83 	.word	0x431bde83

08001708 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b01      	cmp	r3, #1
 8001720:	d12e      	bne.n	8001780 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001732:	f7ff fcd7 	bl	80010e4 <HAL_GetTick>
 8001736:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001738:	e01b      	b.n	8001772 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800173a:	f7ff fcd3 	bl	80010e4 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d914      	bls.n	8001772 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10d      	bne.n	8001772 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f043 0210 	orr.w	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e007      	b.n	8001782 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d0dc      	beq.n	800173a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f7ff ff90 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff49 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff5e 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff90 	bl	8001844 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5f 	bl	80017f0 <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffb0 	bl	80018a8 <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b08b      	sub	sp, #44	; 0x2c
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	e169      	b.n	8001c3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001968:	2201      	movs	r2, #1
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	429a      	cmp	r2, r3
 8001982:	f040 8158 	bne.w	8001c36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4a9a      	ldr	r2, [pc, #616]	; (8001bf4 <HAL_GPIO_Init+0x2a0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d05e      	beq.n	8001a4e <HAL_GPIO_Init+0xfa>
 8001990:	4a98      	ldr	r2, [pc, #608]	; (8001bf4 <HAL_GPIO_Init+0x2a0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d875      	bhi.n	8001a82 <HAL_GPIO_Init+0x12e>
 8001996:	4a98      	ldr	r2, [pc, #608]	; (8001bf8 <HAL_GPIO_Init+0x2a4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d058      	beq.n	8001a4e <HAL_GPIO_Init+0xfa>
 800199c:	4a96      	ldr	r2, [pc, #600]	; (8001bf8 <HAL_GPIO_Init+0x2a4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d86f      	bhi.n	8001a82 <HAL_GPIO_Init+0x12e>
 80019a2:	4a96      	ldr	r2, [pc, #600]	; (8001bfc <HAL_GPIO_Init+0x2a8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d052      	beq.n	8001a4e <HAL_GPIO_Init+0xfa>
 80019a8:	4a94      	ldr	r2, [pc, #592]	; (8001bfc <HAL_GPIO_Init+0x2a8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d869      	bhi.n	8001a82 <HAL_GPIO_Init+0x12e>
 80019ae:	4a94      	ldr	r2, [pc, #592]	; (8001c00 <HAL_GPIO_Init+0x2ac>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d04c      	beq.n	8001a4e <HAL_GPIO_Init+0xfa>
 80019b4:	4a92      	ldr	r2, [pc, #584]	; (8001c00 <HAL_GPIO_Init+0x2ac>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d863      	bhi.n	8001a82 <HAL_GPIO_Init+0x12e>
 80019ba:	4a92      	ldr	r2, [pc, #584]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d046      	beq.n	8001a4e <HAL_GPIO_Init+0xfa>
 80019c0:	4a90      	ldr	r2, [pc, #576]	; (8001c04 <HAL_GPIO_Init+0x2b0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d85d      	bhi.n	8001a82 <HAL_GPIO_Init+0x12e>
 80019c6:	2b12      	cmp	r3, #18
 80019c8:	d82a      	bhi.n	8001a20 <HAL_GPIO_Init+0xcc>
 80019ca:	2b12      	cmp	r3, #18
 80019cc:	d859      	bhi.n	8001a82 <HAL_GPIO_Init+0x12e>
 80019ce:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <HAL_GPIO_Init+0x80>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	08001a4f 	.word	0x08001a4f
 80019d8:	08001a29 	.word	0x08001a29
 80019dc:	08001a3b 	.word	0x08001a3b
 80019e0:	08001a7d 	.word	0x08001a7d
 80019e4:	08001a83 	.word	0x08001a83
 80019e8:	08001a83 	.word	0x08001a83
 80019ec:	08001a83 	.word	0x08001a83
 80019f0:	08001a83 	.word	0x08001a83
 80019f4:	08001a83 	.word	0x08001a83
 80019f8:	08001a83 	.word	0x08001a83
 80019fc:	08001a83 	.word	0x08001a83
 8001a00:	08001a83 	.word	0x08001a83
 8001a04:	08001a83 	.word	0x08001a83
 8001a08:	08001a83 	.word	0x08001a83
 8001a0c:	08001a83 	.word	0x08001a83
 8001a10:	08001a83 	.word	0x08001a83
 8001a14:	08001a83 	.word	0x08001a83
 8001a18:	08001a31 	.word	0x08001a31
 8001a1c:	08001a45 	.word	0x08001a45
 8001a20:	4a79      	ldr	r2, [pc, #484]	; (8001c08 <HAL_GPIO_Init+0x2b4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d013      	beq.n	8001a4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a26:	e02c      	b.n	8001a82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	623b      	str	r3, [r7, #32]
          break;
 8001a2e:	e029      	b.n	8001a84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	3304      	adds	r3, #4
 8001a36:	623b      	str	r3, [r7, #32]
          break;
 8001a38:	e024      	b.n	8001a84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	3308      	adds	r3, #8
 8001a40:	623b      	str	r3, [r7, #32]
          break;
 8001a42:	e01f      	b.n	8001a84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	330c      	adds	r3, #12
 8001a4a:	623b      	str	r3, [r7, #32]
          break;
 8001a4c:	e01a      	b.n	8001a84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a56:	2304      	movs	r3, #4
 8001a58:	623b      	str	r3, [r7, #32]
          break;
 8001a5a:	e013      	b.n	8001a84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d105      	bne.n	8001a70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a64:	2308      	movs	r3, #8
 8001a66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	611a      	str	r2, [r3, #16]
          break;
 8001a6e:	e009      	b.n	8001a84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a70:	2308      	movs	r3, #8
 8001a72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	615a      	str	r2, [r3, #20]
          break;
 8001a7a:	e003      	b.n	8001a84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
          break;
 8001a80:	e000      	b.n	8001a84 <HAL_GPIO_Init+0x130>
          break;
 8001a82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2bff      	cmp	r3, #255	; 0xff
 8001a88:	d801      	bhi.n	8001a8e <HAL_GPIO_Init+0x13a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	e001      	b.n	8001a92 <HAL_GPIO_Init+0x13e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3304      	adds	r3, #4
 8001a92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2bff      	cmp	r3, #255	; 0xff
 8001a98:	d802      	bhi.n	8001aa0 <HAL_GPIO_Init+0x14c>
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	e002      	b.n	8001aa6 <HAL_GPIO_Init+0x152>
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	3b08      	subs	r3, #8
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	210f      	movs	r1, #15
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	6a39      	ldr	r1, [r7, #32]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80b1 	beq.w	8001c36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad4:	4b4d      	ldr	r3, [pc, #308]	; (8001c0c <HAL_GPIO_Init+0x2b8>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a4c      	ldr	r2, [pc, #304]	; (8001c0c <HAL_GPIO_Init+0x2b8>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <HAL_GPIO_Init+0x2b8>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aec:	4a48      	ldr	r2, [pc, #288]	; (8001c10 <HAL_GPIO_Init+0x2bc>)
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	3302      	adds	r3, #2
 8001af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a40      	ldr	r2, [pc, #256]	; (8001c14 <HAL_GPIO_Init+0x2c0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d013      	beq.n	8001b40 <HAL_GPIO_Init+0x1ec>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a3f      	ldr	r2, [pc, #252]	; (8001c18 <HAL_GPIO_Init+0x2c4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d00d      	beq.n	8001b3c <HAL_GPIO_Init+0x1e8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a3e      	ldr	r2, [pc, #248]	; (8001c1c <HAL_GPIO_Init+0x2c8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d007      	beq.n	8001b38 <HAL_GPIO_Init+0x1e4>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a3d      	ldr	r2, [pc, #244]	; (8001c20 <HAL_GPIO_Init+0x2cc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_GPIO_Init+0x1e0>
 8001b30:	2303      	movs	r3, #3
 8001b32:	e006      	b.n	8001b42 <HAL_GPIO_Init+0x1ee>
 8001b34:	2304      	movs	r3, #4
 8001b36:	e004      	b.n	8001b42 <HAL_GPIO_Init+0x1ee>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e002      	b.n	8001b42 <HAL_GPIO_Init+0x1ee>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_GPIO_Init+0x1ee>
 8001b40:	2300      	movs	r3, #0
 8001b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b44:	f002 0203 	and.w	r2, r2, #3
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	4093      	lsls	r3, r2
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b52:	492f      	ldr	r1, [pc, #188]	; (8001c10 <HAL_GPIO_Init+0x2bc>)
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d006      	beq.n	8001b7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b6c:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	492c      	ldr	r1, [pc, #176]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	4928      	ldr	r1, [pc, #160]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b94:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	4922      	ldr	r1, [pc, #136]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	491e      	ldr	r1, [pc, #120]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4918      	ldr	r1, [pc, #96]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	4914      	ldr	r1, [pc, #80]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d021      	beq.n	8001c28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	490e      	ldr	r1, [pc, #56]	; (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
 8001bf0:	e021      	b.n	8001c36 <HAL_GPIO_Init+0x2e2>
 8001bf2:	bf00      	nop
 8001bf4:	10320000 	.word	0x10320000
 8001bf8:	10310000 	.word	0x10310000
 8001bfc:	10220000 	.word	0x10220000
 8001c00:	10210000 	.word	0x10210000
 8001c04:	10120000 	.word	0x10120000
 8001c08:	10110000 	.word	0x10110000
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000
 8001c14:	40010800 	.word	0x40010800
 8001c18:	40010c00 	.word	0x40010c00
 8001c1c:	40011000 	.word	0x40011000
 8001c20:	40011400 	.word	0x40011400
 8001c24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	4909      	ldr	r1, [pc, #36]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	3301      	adds	r3, #1
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f47f ae8e 	bne.w	8001968 <HAL_GPIO_Init+0x14>
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	372c      	adds	r7, #44	; 0x2c
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	40010400 	.word	0x40010400

08001c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e12b      	b.n	8001ec6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff f862 	bl	8000d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2224      	movs	r2, #36	; 0x24
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cc0:	f001 f832 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8001cc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4a81      	ldr	r2, [pc, #516]	; (8001ed0 <HAL_I2C_Init+0x274>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d807      	bhi.n	8001ce0 <HAL_I2C_Init+0x84>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4a80      	ldr	r2, [pc, #512]	; (8001ed4 <HAL_I2C_Init+0x278>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	bf94      	ite	ls
 8001cd8:	2301      	movls	r3, #1
 8001cda:	2300      	movhi	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	e006      	b.n	8001cee <HAL_I2C_Init+0x92>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4a7d      	ldr	r2, [pc, #500]	; (8001ed8 <HAL_I2C_Init+0x27c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	bf94      	ite	ls
 8001ce8:	2301      	movls	r3, #1
 8001cea:	2300      	movhi	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0e7      	b.n	8001ec6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4a78      	ldr	r2, [pc, #480]	; (8001edc <HAL_I2C_Init+0x280>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0c9b      	lsrs	r3, r3, #18
 8001d00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4a6a      	ldr	r2, [pc, #424]	; (8001ed0 <HAL_I2C_Init+0x274>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d802      	bhi.n	8001d30 <HAL_I2C_Init+0xd4>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	e009      	b.n	8001d44 <HAL_I2C_Init+0xe8>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	4a69      	ldr	r2, [pc, #420]	; (8001ee0 <HAL_I2C_Init+0x284>)
 8001d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	3301      	adds	r3, #1
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	495c      	ldr	r1, [pc, #368]	; (8001ed0 <HAL_I2C_Init+0x274>)
 8001d60:	428b      	cmp	r3, r1
 8001d62:	d819      	bhi.n	8001d98 <HAL_I2C_Init+0x13c>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1e59      	subs	r1, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d72:	1c59      	adds	r1, r3, #1
 8001d74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d78:	400b      	ands	r3, r1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <HAL_I2C_Init+0x138>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1e59      	subs	r1, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d92:	e051      	b.n	8001e38 <HAL_I2C_Init+0x1dc>
 8001d94:	2304      	movs	r3, #4
 8001d96:	e04f      	b.n	8001e38 <HAL_I2C_Init+0x1dc>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d111      	bne.n	8001dc4 <HAL_I2C_Init+0x168>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1e58      	subs	r0, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	440b      	add	r3, r1
 8001dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e012      	b.n	8001dea <HAL_I2C_Init+0x18e>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1e58      	subs	r0, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	0099      	lsls	r1, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Init+0x196>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e022      	b.n	8001e38 <HAL_I2C_Init+0x1dc>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10e      	bne.n	8001e18 <HAL_I2C_Init+0x1bc>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1e58      	subs	r0, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6859      	ldr	r1, [r3, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	440b      	add	r3, r1
 8001e08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e16:	e00f      	b.n	8001e38 <HAL_I2C_Init+0x1dc>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e58      	subs	r0, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	0099      	lsls	r1, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	6809      	ldr	r1, [r1, #0]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69da      	ldr	r2, [r3, #28]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6911      	ldr	r1, [r2, #16]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68d2      	ldr	r2, [r2, #12]
 8001e72:	4311      	orrs	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	000186a0 	.word	0x000186a0
 8001ed4:	001e847f 	.word	0x001e847f
 8001ed8:	003d08ff 	.word	0x003d08ff
 8001edc:	431bde83 	.word	0x431bde83
 8001ee0:	10624dd3 	.word	0x10624dd3

08001ee4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	817b      	strh	r3, [r7, #10]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff f8f4 	bl	80010e4 <HAL_GetTick>
 8001efc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	f040 80e0 	bne.w	80020cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2319      	movs	r3, #25
 8001f12:	2201      	movs	r2, #1
 8001f14:	4970      	ldr	r1, [pc, #448]	; (80020d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f964 	bl	80021e4 <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
 8001f24:	e0d3      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_I2C_Master_Transmit+0x50>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e0cc      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d007      	beq.n	8001f5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2221      	movs	r2, #33	; 0x21
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2210      	movs	r2, #16
 8001f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	893a      	ldrh	r2, [r7, #8]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4a50      	ldr	r2, [pc, #320]	; (80020dc <HAL_I2C_Master_Transmit+0x1f8>)
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f9c:	8979      	ldrh	r1, [r7, #10]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	6a3a      	ldr	r2, [r7, #32]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f89c 	bl	80020e0 <I2C_MasterRequestWrite>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e08d      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fc8:	e066      	b.n	8002098 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	6a39      	ldr	r1, [r7, #32]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fa22 	bl	8002418 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d107      	bne.n	8001ff2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06b      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b04      	cmp	r3, #4
 8002032:	d11b      	bne.n	800206c <HAL_I2C_Master_Transmit+0x188>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002038:	2b00      	cmp	r3, #0
 800203a:	d017      	beq.n	800206c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	6a39      	ldr	r1, [r7, #32]
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fa19 	bl	80024a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00d      	beq.n	8002098 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	2b04      	cmp	r3, #4
 8002082:	d107      	bne.n	8002094 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002092:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e01a      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	d194      	bne.n	8001fca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	e000      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020cc:	2302      	movs	r3, #2
  }
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	00100002 	.word	0x00100002
 80020dc:	ffff0000 	.word	0xffff0000

080020e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	460b      	mov	r3, r1
 80020ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d006      	beq.n	800210a <I2C_MasterRequestWrite+0x2a>
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d003      	beq.n	800210a <I2C_MasterRequestWrite+0x2a>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002108:	d108      	bne.n	800211c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e00b      	b.n	8002134 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	2b12      	cmp	r3, #18
 8002122:	d107      	bne.n	8002134 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002132:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f84f 	bl	80021e4 <I2C_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215a:	d103      	bne.n	8002164 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e035      	b.n	80021d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002170:	d108      	bne.n	8002184 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002172:	897b      	ldrh	r3, [r7, #10]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002180:	611a      	str	r2, [r3, #16]
 8002182:	e01b      	b.n	80021bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002184:	897b      	ldrh	r3, [r7, #10]
 8002186:	11db      	asrs	r3, r3, #7
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f003 0306 	and.w	r3, r3, #6
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f063 030f 	orn	r3, r3, #15
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	490e      	ldr	r1, [pc, #56]	; (80021dc <I2C_MasterRequestWrite+0xfc>)
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f898 	bl	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e010      	b.n	80021d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021b2:	897b      	ldrh	r3, [r7, #10]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <I2C_MasterRequestWrite+0x100>)
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f888 	bl	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	00010008 	.word	0x00010008
 80021e0:	00010002 	.word	0x00010002

080021e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f4:	e048      	b.n	8002288 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d044      	beq.n	8002288 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021fe:	f7fe ff71 	bl	80010e4 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d302      	bcc.n	8002214 <I2C_WaitOnFlagUntilTimeout+0x30>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d139      	bne.n	8002288 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	0c1b      	lsrs	r3, r3, #16
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10d      	bne.n	800223a <I2C_WaitOnFlagUntilTimeout+0x56>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	43da      	mvns	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	4013      	ands	r3, r2
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	e00c      	b.n	8002254 <I2C_WaitOnFlagUntilTimeout+0x70>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	43da      	mvns	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4013      	ands	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf0c      	ite	eq
 800224c:	2301      	moveq	r3, #1
 800224e:	2300      	movne	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	429a      	cmp	r2, r3
 8002258:	d116      	bne.n	8002288 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e023      	b.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	0c1b      	lsrs	r3, r3, #16
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d10d      	bne.n	80022ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	43da      	mvns	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	4013      	ands	r3, r2
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf0c      	ite	eq
 80022a4:	2301      	moveq	r3, #1
 80022a6:	2300      	movne	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	e00c      	b.n	80022c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	43da      	mvns	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	4013      	ands	r3, r2
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d093      	beq.n	80021f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022e6:	e071      	b.n	80023cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f6:	d123      	bne.n	8002340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002306:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002310:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f043 0204 	orr.w	r2, r3, #4
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e067      	b.n	8002410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002346:	d041      	beq.n	80023cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002348:	f7fe fecc 	bl	80010e4 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d302      	bcc.n	800235e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d136      	bne.n	80023cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10c      	bne.n	8002382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4013      	ands	r3, r2
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf14      	ite	ne
 800237a:	2301      	movne	r3, #1
 800237c:	2300      	moveq	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	e00b      	b.n	800239a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	43da      	mvns	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	4013      	ands	r3, r2
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf14      	ite	ne
 8002394:	2301      	movne	r3, #1
 8002396:	2300      	moveq	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d016      	beq.n	80023cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e021      	b.n	8002410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	0c1b      	lsrs	r3, r3, #16
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d10c      	bne.n	80023f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	43da      	mvns	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4013      	ands	r3, r2
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e00b      	b.n	8002408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4013      	ands	r3, r2
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf14      	ite	ne
 8002402:	2301      	movne	r3, #1
 8002404:	2300      	moveq	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	f47f af6d 	bne.w	80022e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002424:	e034      	b.n	8002490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f886 	bl	8002538 <I2C_IsAcknowledgeFailed>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e034      	b.n	80024a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d028      	beq.n	8002490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243e:	f7fe fe51 	bl	80010e4 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	429a      	cmp	r2, r3
 800244c:	d302      	bcc.n	8002454 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d11d      	bne.n	8002490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b80      	cmp	r3, #128	; 0x80
 8002460:	d016      	beq.n	8002490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f043 0220 	orr.w	r2, r3, #32
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e007      	b.n	80024a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249a:	2b80      	cmp	r3, #128	; 0x80
 800249c:	d1c3      	bne.n	8002426 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024b4:	e034      	b.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f83e 	bl	8002538 <I2C_IsAcknowledgeFailed>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e034      	b.n	8002530 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d028      	beq.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ce:	f7fe fe09 	bl	80010e4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d302      	bcc.n	80024e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d11d      	bne.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d016      	beq.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f043 0220 	orr.w	r2, r3, #32
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e007      	b.n	8002530 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b04      	cmp	r3, #4
 800252c:	d1c3      	bne.n	80024b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254e:	d11b      	bne.n	8002588 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002558:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f043 0204 	orr.w	r2, r3, #4
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e272      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8087 	beq.w	80026c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b4:	4b92      	ldr	r3, [pc, #584]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 030c 	and.w	r3, r3, #12
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d00c      	beq.n	80025da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025c0:	4b8f      	ldr	r3, [pc, #572]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d112      	bne.n	80025f2 <HAL_RCC_OscConfig+0x5e>
 80025cc:	4b8c      	ldr	r3, [pc, #560]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d8:	d10b      	bne.n	80025f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d06c      	beq.n	80026c0 <HAL_RCC_OscConfig+0x12c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d168      	bne.n	80026c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e24c      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x76>
 80025fc:	4b80      	ldr	r3, [pc, #512]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a7f      	ldr	r2, [pc, #508]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	e02e      	b.n	8002668 <HAL_RCC_OscConfig+0xd4>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10c      	bne.n	800262c <HAL_RCC_OscConfig+0x98>
 8002612:	4b7b      	ldr	r3, [pc, #492]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a7a      	ldr	r2, [pc, #488]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b78      	ldr	r3, [pc, #480]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a77      	ldr	r2, [pc, #476]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e01d      	b.n	8002668 <HAL_RCC_OscConfig+0xd4>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0xbc>
 8002636:	4b72      	ldr	r3, [pc, #456]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a71      	ldr	r2, [pc, #452]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800263c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0xd4>
 8002650:	4b6b      	ldr	r3, [pc, #428]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a6a      	ldr	r2, [pc, #424]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b68      	ldr	r3, [pc, #416]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a67      	ldr	r2, [pc, #412]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002666:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fd38 	bl	80010e4 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002678:	f7fe fd34 	bl	80010e4 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e200      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b5d      	ldr	r3, [pc, #372]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0xe4>
 8002696:	e014      	b.n	80026c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fd24 	bl	80010e4 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a0:	f7fe fd20 	bl	80010e4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e1ec      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x10c>
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d063      	beq.n	8002796 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ce:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026da:	4b49      	ldr	r3, [pc, #292]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d11c      	bne.n	8002720 <HAL_RCC_OscConfig+0x18c>
 80026e6:	4b46      	ldr	r3, [pc, #280]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d116      	bne.n	8002720 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f2:	4b43      	ldr	r3, [pc, #268]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_RCC_OscConfig+0x176>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1c0      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4939      	ldr	r1, [pc, #228]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	e03a      	b.n	8002796 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002728:	4b36      	ldr	r3, [pc, #216]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fe fcd9 	bl	80010e4 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002736:	f7fe fcd5 	bl	80010e4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e1a1      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4927      	ldr	r1, [pc, #156]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
 8002768:	e015      	b.n	8002796 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7fe fcb8 	bl	80010e4 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002778:	f7fe fcb4 	bl	80010e4 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e180      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d03a      	beq.n	8002818 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d019      	beq.n	80027de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027aa:	4b17      	ldr	r3, [pc, #92]	; (8002808 <HAL_RCC_OscConfig+0x274>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7fe fc98 	bl	80010e4 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b8:	f7fe fc94 	bl	80010e4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e160      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027d6:	2001      	movs	r0, #1
 80027d8:	f000 face 	bl	8002d78 <RCC_Delay>
 80027dc:	e01c      	b.n	8002818 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_RCC_OscConfig+0x274>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e4:	f7fe fc7e 	bl	80010e4 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ea:	e00f      	b.n	800280c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ec:	f7fe fc7a 	bl	80010e4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d908      	bls.n	800280c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e146      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	42420000 	.word	0x42420000
 8002808:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	4b92      	ldr	r3, [pc, #584]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e9      	bne.n	80027ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80a6 	beq.w	8002972 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002826:	2300      	movs	r3, #0
 8002828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282a:	4b8b      	ldr	r3, [pc, #556]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4a87      	ldr	r2, [pc, #540]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002840:	61d3      	str	r3, [r2, #28]
 8002842:	4b85      	ldr	r3, [pc, #532]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284e:	2301      	movs	r3, #1
 8002850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002852:	4b82      	ldr	r3, [pc, #520]	; (8002a5c <HAL_RCC_OscConfig+0x4c8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d118      	bne.n	8002890 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285e:	4b7f      	ldr	r3, [pc, #508]	; (8002a5c <HAL_RCC_OscConfig+0x4c8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7e      	ldr	r2, [pc, #504]	; (8002a5c <HAL_RCC_OscConfig+0x4c8>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286a:	f7fe fc3b 	bl	80010e4 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002872:	f7fe fc37 	bl	80010e4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b64      	cmp	r3, #100	; 0x64
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e103      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	4b75      	ldr	r3, [pc, #468]	; (8002a5c <HAL_RCC_OscConfig+0x4c8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x312>
 8002898:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4a6e      	ldr	r2, [pc, #440]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6213      	str	r3, [r2, #32]
 80028a4:	e02d      	b.n	8002902 <HAL_RCC_OscConfig+0x36e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x334>
 80028ae:	4b6a      	ldr	r3, [pc, #424]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4a69      	ldr	r2, [pc, #420]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6213      	str	r3, [r2, #32]
 80028ba:	4b67      	ldr	r3, [pc, #412]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4a66      	ldr	r2, [pc, #408]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	6213      	str	r3, [r2, #32]
 80028c6:	e01c      	b.n	8002902 <HAL_RCC_OscConfig+0x36e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x356>
 80028d0:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4a60      	ldr	r2, [pc, #384]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6213      	str	r3, [r2, #32]
 80028dc:	4b5e      	ldr	r3, [pc, #376]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4a5d      	ldr	r2, [pc, #372]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6213      	str	r3, [r2, #32]
 80028e8:	e00b      	b.n	8002902 <HAL_RCC_OscConfig+0x36e>
 80028ea:	4b5b      	ldr	r3, [pc, #364]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4a5a      	ldr	r2, [pc, #360]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6213      	str	r3, [r2, #32]
 80028f6:	4b58      	ldr	r3, [pc, #352]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a57      	ldr	r2, [pc, #348]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d015      	beq.n	8002936 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290a:	f7fe fbeb 	bl	80010e4 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe fbe7 	bl	80010e4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0b1      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	4b4b      	ldr	r3, [pc, #300]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ee      	beq.n	8002912 <HAL_RCC_OscConfig+0x37e>
 8002934:	e014      	b.n	8002960 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7fe fbd5 	bl	80010e4 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe fbd1 	bl	80010e4 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e09b      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ee      	bne.n	800293e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d105      	bne.n	8002972 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002966:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002970:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8087 	beq.w	8002a8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297c:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b08      	cmp	r3, #8
 8002986:	d061      	beq.n	8002a4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d146      	bne.n	8002a1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002990:	4b33      	ldr	r3, [pc, #204]	; (8002a60 <HAL_RCC_OscConfig+0x4cc>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe fba5 	bl	80010e4 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299e:	f7fe fba1 	bl	80010e4 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e06d      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b0:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c4:	d108      	bne.n	80029d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4921      	ldr	r1, [pc, #132]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a19      	ldr	r1, [r3, #32]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	430b      	orrs	r3, r1
 80029ea:	491b      	ldr	r1, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe fb75 	bl	80010e4 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe fb71 	bl	80010e4 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e03d      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x46a>
 8002a1c:	e035      	b.n	8002a8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_RCC_OscConfig+0x4cc>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fe fb5e 	bl	80010e4 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe fb5a 	bl	80010e4 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e026      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x498>
 8002a4a:	e01e      	b.n	8002a8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e019      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_OscConfig+0x500>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0d0      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aac:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d910      	bls.n	8002adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b67      	ldr	r3, [pc, #412]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 0207 	bic.w	r2, r3, #7
 8002ac2:	4965      	ldr	r1, [pc, #404]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0b8      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d020      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af4:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a58      	ldr	r2, [pc, #352]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002afe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b0c:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a52      	ldr	r2, [pc, #328]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b18:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	494d      	ldr	r1, [pc, #308]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d040      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d115      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e07f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b56:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e073      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b66:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e06b      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b76:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f023 0203 	bic.w	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4936      	ldr	r1, [pc, #216]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b88:	f7fe faac 	bl	80010e4 <HAL_GetTick>
 8002b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b90:	f7fe faa8 	bl	80010e4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e053      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 020c 	and.w	r2, r3, #12
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d1eb      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d210      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 0207 	bic.w	r2, r3, #7
 8002bce:	4922      	ldr	r1, [pc, #136]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e032      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4916      	ldr	r1, [pc, #88]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	490e      	ldr	r1, [pc, #56]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c26:	f000 f821 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	490a      	ldr	r1, [pc, #40]	; (8002c60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	5ccb      	ldrb	r3, [r1, r3]
 8002c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3e:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <HAL_RCC_ClockConfig+0x1cc>)
 8002c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_ClockConfig+0x1d0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fa0a 	bl	8001060 <HAL_InitTick>

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40022000 	.word	0x40022000
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	08004958 	.word	0x08004958
 8002c64:	20000018 	.word	0x20000018
 8002c68:	2000001c 	.word	0x2000001c

08002c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c86:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d002      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x30>
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x36>
 8002c9a:	e027      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c9e:	613b      	str	r3, [r7, #16]
      break;
 8002ca0:	e027      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	0c9b      	lsrs	r3, r3, #18
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cac:	5cd3      	ldrb	r3, [r2, r3]
 8002cae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	0c5b      	lsrs	r3, r3, #17
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cc6:	5cd3      	ldrb	r3, [r2, r3]
 8002cc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cce:	fb03 f202 	mul.w	r2, r3, r2
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e004      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ce0:	fb02 f303 	mul.w	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	613b      	str	r3, [r7, #16]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cee:	613b      	str	r3, [r7, #16]
      break;
 8002cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf2:	693b      	ldr	r3, [r7, #16]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
 8002d04:	007a1200 	.word	0x007a1200
 8002d08:	08004970 	.word	0x08004970
 8002d0c:	08004980 	.word	0x08004980
 8002d10:	003d0900 	.word	0x003d0900

08002d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d18:	4b02      	ldr	r3, [pc, #8]	; (8002d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	20000018 	.word	0x20000018

08002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d2c:	f7ff fff2 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4903      	ldr	r1, [pc, #12]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	08004968 	.word	0x08004968

08002d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d54:	f7ff ffde 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	0adb      	lsrs	r3, r3, #11
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08004968 	.word	0x08004968

08002d78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <RCC_Delay+0x34>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <RCC_Delay+0x38>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	0a5b      	lsrs	r3, r3, #9
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d94:	bf00      	nop
  }
  while (Delay --);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1e5a      	subs	r2, r3, #1
 8002d9a:	60fa      	str	r2, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f9      	bne.n	8002d94 <RCC_Delay+0x1c>
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	20000018 	.word	0x20000018
 8002db0:	10624dd3 	.word	0x10624dd3

08002db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d07d      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd4:	4b4f      	ldr	r3, [pc, #316]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10d      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de0:	4b4c      	ldr	r3, [pc, #304]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	4a4b      	ldr	r2, [pc, #300]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dea:	61d3      	str	r3, [r2, #28]
 8002dec:	4b49      	ldr	r3, [pc, #292]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	4b46      	ldr	r3, [pc, #280]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d118      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e08:	4b43      	ldr	r3, [pc, #268]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a42      	ldr	r2, [pc, #264]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e14:	f7fe f966 	bl	80010e4 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	e008      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1c:	f7fe f962 	bl	80010e4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e06d      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b3a      	ldr	r3, [pc, #232]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e3a:	4b36      	ldr	r3, [pc, #216]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d02e      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d027      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e58:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e62:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e68:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e6e:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d014      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fe f931 	bl	80010e4 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7fe f92d 	bl	80010e4 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e036      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ee      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4917      	ldr	r1, [pc, #92]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d105      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	490b      	ldr	r1, [pc, #44]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	4904      	ldr	r1, [pc, #16]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	42420440 	.word	0x42420440

08002f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e041      	b.n	8002fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fd ff3e 	bl	8000dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f000 fb00 	bl	8003564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e041      	b.n	8003054 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f839 	bl	800305c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f000 fab1 	bl	8003564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
	...

08003070 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_TIM_PWM_Start_IT+0x28>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e022      	b.n	80030de <HAL_TIM_PWM_Start_IT+0x6e>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b04      	cmp	r3, #4
 800309c:	d109      	bne.n	80030b2 <HAL_TIM_PWM_Start_IT+0x42>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	e015      	b.n	80030de <HAL_TIM_PWM_Start_IT+0x6e>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d109      	bne.n	80030cc <HAL_TIM_PWM_Start_IT+0x5c>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e008      	b.n	80030de <HAL_TIM_PWM_Start_IT+0x6e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e0a9      	b.n	800323a <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_PWM_Start_IT+0x86>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f4:	e013      	b.n	800311e <HAL_TIM_PWM_Start_IT+0xae>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_PWM_Start_IT+0x96>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003104:	e00b      	b.n	800311e <HAL_TIM_PWM_Start_IT+0xae>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d104      	bne.n	8003116 <HAL_TIM_PWM_Start_IT+0xa6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003114:	e003      	b.n	800311e <HAL_TIM_PWM_Start_IT+0xae>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d841      	bhi.n	80031a8 <HAL_TIM_PWM_Start_IT+0x138>
 8003124:	a201      	add	r2, pc, #4	; (adr r2, 800312c <HAL_TIM_PWM_Start_IT+0xbc>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	08003161 	.word	0x08003161
 8003130:	080031a9 	.word	0x080031a9
 8003134:	080031a9 	.word	0x080031a9
 8003138:	080031a9 	.word	0x080031a9
 800313c:	08003173 	.word	0x08003173
 8003140:	080031a9 	.word	0x080031a9
 8003144:	080031a9 	.word	0x080031a9
 8003148:	080031a9 	.word	0x080031a9
 800314c:	08003185 	.word	0x08003185
 8003150:	080031a9 	.word	0x080031a9
 8003154:	080031a9 	.word	0x080031a9
 8003158:	080031a9 	.word	0x080031a9
 800315c:	08003197 	.word	0x08003197
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0202 	orr.w	r2, r2, #2
 800316e:	60da      	str	r2, [r3, #12]
      break;
 8003170:	e01d      	b.n	80031ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0204 	orr.w	r2, r2, #4
 8003180:	60da      	str	r2, [r3, #12]
      break;
 8003182:	e014      	b.n	80031ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0208 	orr.w	r2, r2, #8
 8003192:	60da      	str	r2, [r3, #12]
      break;
 8003194:	e00b      	b.n	80031ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0210 	orr.w	r2, r2, #16
 80031a4:	60da      	str	r2, [r3, #12]
      break;
 80031a6:	e002      	b.n	80031ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
      break;
 80031ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d141      	bne.n	8003238 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2201      	movs	r2, #1
 80031ba:	6839      	ldr	r1, [r7, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fc51 	bl	8003a64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1f      	ldr	r2, [pc, #124]	; (8003244 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d107      	bne.n	80031dc <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a18      	ldr	r2, [pc, #96]	; (8003244 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00e      	beq.n	8003204 <HAL_TIM_PWM_Start_IT+0x194>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ee:	d009      	beq.n	8003204 <HAL_TIM_PWM_Start_IT+0x194>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a14      	ldr	r2, [pc, #80]	; (8003248 <HAL_TIM_PWM_Start_IT+0x1d8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_TIM_PWM_Start_IT+0x194>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a13      	ldr	r2, [pc, #76]	; (800324c <HAL_TIM_PWM_Start_IT+0x1dc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d111      	bne.n	8003228 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b06      	cmp	r3, #6
 8003214:	d010      	beq.n	8003238 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003226:	e007      	b.n	8003238 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800

08003250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800326a:	2302      	movs	r3, #2
 800326c:	e0ae      	b.n	80033cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b0c      	cmp	r3, #12
 800327a:	f200 809f 	bhi.w	80033bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800327e:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	080032b9 	.word	0x080032b9
 8003288:	080033bd 	.word	0x080033bd
 800328c:	080033bd 	.word	0x080033bd
 8003290:	080033bd 	.word	0x080033bd
 8003294:	080032f9 	.word	0x080032f9
 8003298:	080033bd 	.word	0x080033bd
 800329c:	080033bd 	.word	0x080033bd
 80032a0:	080033bd 	.word	0x080033bd
 80032a4:	0800333b 	.word	0x0800333b
 80032a8:	080033bd 	.word	0x080033bd
 80032ac:	080033bd 	.word	0x080033bd
 80032b0:	080033bd 	.word	0x080033bd
 80032b4:	0800337b 	.word	0x0800337b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f9b2 	bl	8003628 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0208 	orr.w	r2, r2, #8
 80032d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0204 	bic.w	r2, r2, #4
 80032e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6999      	ldr	r1, [r3, #24]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	619a      	str	r2, [r3, #24]
      break;
 80032f6:	e064      	b.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f9f8 	bl	80036f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6999      	ldr	r1, [r3, #24]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	021a      	lsls	r2, r3, #8
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	619a      	str	r2, [r3, #24]
      break;
 8003338:	e043      	b.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fa41 	bl	80037c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0208 	orr.w	r2, r2, #8
 8003354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0204 	bic.w	r2, r2, #4
 8003364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69d9      	ldr	r1, [r3, #28]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	61da      	str	r2, [r3, #28]
      break;
 8003378:	e023      	b.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fa8b 	bl	800389c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69d9      	ldr	r1, [r3, #28]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	021a      	lsls	r2, r3, #8
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	61da      	str	r2, [r3, #28]
      break;
 80033ba:	e002      	b.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	75fb      	strb	r3, [r7, #23]
      break;
 80033c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_TIM_ConfigClockSource+0x1c>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e0b4      	b.n	800355a <HAL_TIM_ConfigClockSource+0x186>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800340e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003428:	d03e      	beq.n	80034a8 <HAL_TIM_ConfigClockSource+0xd4>
 800342a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342e:	f200 8087 	bhi.w	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003436:	f000 8086 	beq.w	8003546 <HAL_TIM_ConfigClockSource+0x172>
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343e:	d87f      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003440:	2b70      	cmp	r3, #112	; 0x70
 8003442:	d01a      	beq.n	800347a <HAL_TIM_ConfigClockSource+0xa6>
 8003444:	2b70      	cmp	r3, #112	; 0x70
 8003446:	d87b      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003448:	2b60      	cmp	r3, #96	; 0x60
 800344a:	d050      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x11a>
 800344c:	2b60      	cmp	r3, #96	; 0x60
 800344e:	d877      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003450:	2b50      	cmp	r3, #80	; 0x50
 8003452:	d03c      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0xfa>
 8003454:	2b50      	cmp	r3, #80	; 0x50
 8003456:	d873      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d058      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x13a>
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	d86f      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b30      	cmp	r3, #48	; 0x30
 8003462:	d064      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x15a>
 8003464:	2b30      	cmp	r3, #48	; 0x30
 8003466:	d86b      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b20      	cmp	r3, #32
 800346a:	d060      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x15a>
 800346c:	2b20      	cmp	r3, #32
 800346e:	d867      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d05c      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x15a>
 8003474:	2b10      	cmp	r3, #16
 8003476:	d05a      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x15a>
 8003478:	e062      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800348a:	f000 facc 	bl	8003a26 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800349c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	609a      	str	r2, [r3, #8]
      break;
 80034a6:	e04f      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034b8:	f000 fab5 	bl	8003a26 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ca:	609a      	str	r2, [r3, #8]
      break;
 80034cc:	e03c      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034da:	461a      	mov	r2, r3
 80034dc:	f000 fa2c 	bl	8003938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2150      	movs	r1, #80	; 0x50
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fa83 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 80034ec:	e02c      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034fa:	461a      	mov	r2, r3
 80034fc:	f000 fa4a 	bl	8003994 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2160      	movs	r1, #96	; 0x60
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fa73 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 800350c:	e01c      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800351a:	461a      	mov	r2, r3
 800351c:	f000 fa0c 	bl	8003938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2140      	movs	r1, #64	; 0x40
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fa63 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 800352c:	e00c      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4619      	mov	r1, r3
 8003538:	4610      	mov	r0, r2
 800353a:	f000 fa5a 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 800353e:	e003      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      break;
 8003544:	e000      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a29      	ldr	r2, [pc, #164]	; (800361c <TIM_Base_SetConfig+0xb8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00b      	beq.n	8003594 <TIM_Base_SetConfig+0x30>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d007      	beq.n	8003594 <TIM_Base_SetConfig+0x30>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a26      	ldr	r2, [pc, #152]	; (8003620 <TIM_Base_SetConfig+0xbc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_Base_SetConfig+0x30>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a25      	ldr	r2, [pc, #148]	; (8003624 <TIM_Base_SetConfig+0xc0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d108      	bne.n	80035a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <TIM_Base_SetConfig+0xb8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <TIM_Base_SetConfig+0x62>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b4:	d007      	beq.n	80035c6 <TIM_Base_SetConfig+0x62>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <TIM_Base_SetConfig+0xbc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0x62>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a18      	ldr	r2, [pc, #96]	; (8003624 <TIM_Base_SetConfig+0xc0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d108      	bne.n	80035d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a07      	ldr	r2, [pc, #28]	; (800361c <TIM_Base_SetConfig+0xb8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d103      	bne.n	800360c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	615a      	str	r2, [r3, #20]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800

08003628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f023 0201 	bic.w	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f023 0302 	bic.w	r3, r3, #2
 8003670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <TIM_OC1_SetConfig+0xc8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10c      	bne.n	800369e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0308 	bic.w	r3, r3, #8
 800368a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <TIM_OC1_SetConfig+0xc8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d111      	bne.n	80036ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	621a      	str	r2, [r3, #32]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40012c00 	.word	0x40012c00

080036f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f023 0210 	bic.w	r2, r3, #16
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 0320 	bic.w	r3, r3, #32
 800373e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <TIM_OC2_SetConfig+0xd0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d10d      	bne.n	8003770 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800375a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800376e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <TIM_OC2_SetConfig+0xd0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d113      	bne.n	80037a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800377e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	621a      	str	r2, [r3, #32]
}
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	40012c00 	.word	0x40012c00

080037c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <TIM_OC3_SetConfig+0xd0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10d      	bne.n	8003842 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800382c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <TIM_OC3_SetConfig+0xd0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d113      	bne.n	8003872 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	621a      	str	r2, [r3, #32]
}
 800388c:	bf00      	nop
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40012c00 	.word	0x40012c00

0800389c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	031b      	lsls	r3, r3, #12
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a0f      	ldr	r2, [pc, #60]	; (8003934 <TIM_OC4_SetConfig+0x98>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d109      	bne.n	8003910 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	621a      	str	r2, [r3, #32]
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	40012c00 	.word	0x40012c00

08003938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0201 	bic.w	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f023 030a 	bic.w	r3, r3, #10
 8003974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f023 0210 	bic.w	r2, r3, #16
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	031b      	lsls	r3, r3, #12
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	621a      	str	r2, [r3, #32]
}
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr

080039f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f043 0307 	orr.w	r3, r3, #7
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	609a      	str	r2, [r3, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b087      	sub	sp, #28
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	021a      	lsls	r2, r3, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	609a      	str	r2, [r3, #8]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2201      	movs	r2, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	401a      	ands	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a1a      	ldr	r2, [r3, #32]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e046      	b.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b10:	d009      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a12      	ldr	r2, [pc, #72]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a10      	ldr	r2, [pc, #64]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10c      	bne.n	8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800

08003b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e042      	b.n	8003c00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd f97a 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	; 0x24
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f97b 	bl	8003ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	; 0x28
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d16d      	bne.n	8003d04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_UART_Transmit+0x2c>
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e066      	b.n	8003d06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2221      	movs	r2, #33	; 0x21
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c46:	f7fd fa4d 	bl	80010e4 <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	88fa      	ldrh	r2, [r7, #6]
 8003c56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c60:	d108      	bne.n	8003c74 <HAL_UART_Transmit+0x6c>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	e003      	b.n	8003c7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c7c:	e02a      	b.n	8003cd4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2180      	movs	r1, #128	; 0x80
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f865 	bl	8003d58 <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e036      	b.n	8003d06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	e007      	b.n	8003cc6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1cf      	bne.n	8003c7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2140      	movs	r1, #64	; 0x40
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f835 	bl	8003d58 <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e006      	b.n	8003d06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d112      	bne.n	8003d4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_UART_Receive_IT+0x26>
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e00b      	b.n	8003d50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	461a      	mov	r2, r3
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f875 	bl	8003e34 <UART_Start_Receive_IT>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	e000      	b.n	8003d50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b090      	sub	sp, #64	; 0x40
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d68:	e050      	b.n	8003e0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d04c      	beq.n	8003e0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d78:	f7fd f9b4 	bl	80010e4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d241      	bcs.n	8003e0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003da8:	637a      	str	r2, [r7, #52]	; 0x34
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e5      	bne.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3314      	adds	r3, #20
 8003dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	613b      	str	r3, [r7, #16]
   return(result);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3314      	adds	r3, #20
 8003dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ddc:	623a      	str	r2, [r7, #32]
 8003dde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	69f9      	ldr	r1, [r7, #28]
 8003de2:	6a3a      	ldr	r2, [r7, #32]
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e5      	bne.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e00f      	b.n	8003e2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4013      	ands	r3, r2
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d09f      	beq.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3740      	adds	r7, #64	; 0x40
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	88fa      	ldrh	r2, [r7, #6]
 8003e52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2222      	movs	r2, #34	; 0x22
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e78:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0220 	orr.w	r2, r2, #32
 8003e98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
	...

08003ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ee2:	f023 030c 	bic.w	r3, r3, #12
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2c      	ldr	r2, [pc, #176]	; (8003fbc <UART_SetConfig+0x114>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d103      	bne.n	8003f18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f10:	f7fe ff1e 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	e002      	b.n	8003f1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7fe ff06 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009a      	lsls	r2, r3, #2
 8003f28:	441a      	add	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	4a22      	ldr	r2, [pc, #136]	; (8003fc0 <UART_SetConfig+0x118>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	0119      	lsls	r1, r3, #4
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009a      	lsls	r2, r3, #2
 8003f48:	441a      	add	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f54:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <UART_SetConfig+0x118>)
 8003f56:	fba3 0302 	umull	r0, r3, r3, r2
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	2064      	movs	r0, #100	; 0x64
 8003f5e:	fb00 f303 	mul.w	r3, r0, r3
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	3332      	adds	r3, #50	; 0x32
 8003f68:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <UART_SetConfig+0x118>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f74:	4419      	add	r1, r3
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009a      	lsls	r2, r3, #2
 8003f80:	441a      	add	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <UART_SetConfig+0x118>)
 8003f8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	2064      	movs	r0, #100	; 0x64
 8003f96:	fb00 f303 	mul.w	r3, r0, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	3332      	adds	r3, #50	; 0x32
 8003fa0:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <UART_SetConfig+0x118>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	f003 020f 	and.w	r2, r3, #15
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	440a      	add	r2, r1
 8003fb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40013800 	.word	0x40013800
 8003fc0:	51eb851f 	.word	0x51eb851f

08003fc4 <siprintf>:
 8003fc4:	b40e      	push	{r1, r2, r3}
 8003fc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fca:	b500      	push	{lr}
 8003fcc:	b09c      	sub	sp, #112	; 0x70
 8003fce:	ab1d      	add	r3, sp, #116	; 0x74
 8003fd0:	9002      	str	r0, [sp, #8]
 8003fd2:	9006      	str	r0, [sp, #24]
 8003fd4:	9107      	str	r1, [sp, #28]
 8003fd6:	9104      	str	r1, [sp, #16]
 8003fd8:	4808      	ldr	r0, [pc, #32]	; (8003ffc <siprintf+0x38>)
 8003fda:	4909      	ldr	r1, [pc, #36]	; (8004000 <siprintf+0x3c>)
 8003fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fe0:	9105      	str	r1, [sp, #20]
 8003fe2:	6800      	ldr	r0, [r0, #0]
 8003fe4:	a902      	add	r1, sp, #8
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	f000 f98e 	bl	8004308 <_svfiprintf_r>
 8003fec:	2200      	movs	r2, #0
 8003fee:	9b02      	ldr	r3, [sp, #8]
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	b01c      	add	sp, #112	; 0x70
 8003ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ff8:	b003      	add	sp, #12
 8003ffa:	4770      	bx	lr
 8003ffc:	20000070 	.word	0x20000070
 8004000:	ffff0208 	.word	0xffff0208

08004004 <memset>:
 8004004:	4603      	mov	r3, r0
 8004006:	4402      	add	r2, r0
 8004008:	4293      	cmp	r3, r2
 800400a:	d100      	bne.n	800400e <memset+0xa>
 800400c:	4770      	bx	lr
 800400e:	f803 1b01 	strb.w	r1, [r3], #1
 8004012:	e7f9      	b.n	8004008 <memset+0x4>

08004014 <__errno>:
 8004014:	4b01      	ldr	r3, [pc, #4]	; (800401c <__errno+0x8>)
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000070 	.word	0x20000070

08004020 <__libc_init_array>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	2600      	movs	r6, #0
 8004024:	4d0c      	ldr	r5, [pc, #48]	; (8004058 <__libc_init_array+0x38>)
 8004026:	4c0d      	ldr	r4, [pc, #52]	; (800405c <__libc_init_array+0x3c>)
 8004028:	1b64      	subs	r4, r4, r5
 800402a:	10a4      	asrs	r4, r4, #2
 800402c:	42a6      	cmp	r6, r4
 800402e:	d109      	bne.n	8004044 <__libc_init_array+0x24>
 8004030:	f000 fc7a 	bl	8004928 <_init>
 8004034:	2600      	movs	r6, #0
 8004036:	4d0a      	ldr	r5, [pc, #40]	; (8004060 <__libc_init_array+0x40>)
 8004038:	4c0a      	ldr	r4, [pc, #40]	; (8004064 <__libc_init_array+0x44>)
 800403a:	1b64      	subs	r4, r4, r5
 800403c:	10a4      	asrs	r4, r4, #2
 800403e:	42a6      	cmp	r6, r4
 8004040:	d105      	bne.n	800404e <__libc_init_array+0x2e>
 8004042:	bd70      	pop	{r4, r5, r6, pc}
 8004044:	f855 3b04 	ldr.w	r3, [r5], #4
 8004048:	4798      	blx	r3
 800404a:	3601      	adds	r6, #1
 800404c:	e7ee      	b.n	800402c <__libc_init_array+0xc>
 800404e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004052:	4798      	blx	r3
 8004054:	3601      	adds	r6, #1
 8004056:	e7f2      	b.n	800403e <__libc_init_array+0x1e>
 8004058:	080049b8 	.word	0x080049b8
 800405c:	080049b8 	.word	0x080049b8
 8004060:	080049b8 	.word	0x080049b8
 8004064:	080049bc 	.word	0x080049bc

08004068 <__retarget_lock_acquire_recursive>:
 8004068:	4770      	bx	lr

0800406a <__retarget_lock_release_recursive>:
 800406a:	4770      	bx	lr

0800406c <_free_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4605      	mov	r5, r0
 8004070:	2900      	cmp	r1, #0
 8004072:	d040      	beq.n	80040f6 <_free_r+0x8a>
 8004074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004078:	1f0c      	subs	r4, r1, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	bfb8      	it	lt
 800407e:	18e4      	addlt	r4, r4, r3
 8004080:	f000 f8dc 	bl	800423c <__malloc_lock>
 8004084:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <_free_r+0x8c>)
 8004086:	6813      	ldr	r3, [r2, #0]
 8004088:	b933      	cbnz	r3, 8004098 <_free_r+0x2c>
 800408a:	6063      	str	r3, [r4, #4]
 800408c:	6014      	str	r4, [r2, #0]
 800408e:	4628      	mov	r0, r5
 8004090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004094:	f000 b8d8 	b.w	8004248 <__malloc_unlock>
 8004098:	42a3      	cmp	r3, r4
 800409a:	d908      	bls.n	80040ae <_free_r+0x42>
 800409c:	6820      	ldr	r0, [r4, #0]
 800409e:	1821      	adds	r1, r4, r0
 80040a0:	428b      	cmp	r3, r1
 80040a2:	bf01      	itttt	eq
 80040a4:	6819      	ldreq	r1, [r3, #0]
 80040a6:	685b      	ldreq	r3, [r3, #4]
 80040a8:	1809      	addeq	r1, r1, r0
 80040aa:	6021      	streq	r1, [r4, #0]
 80040ac:	e7ed      	b.n	800408a <_free_r+0x1e>
 80040ae:	461a      	mov	r2, r3
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b10b      	cbz	r3, 80040b8 <_free_r+0x4c>
 80040b4:	42a3      	cmp	r3, r4
 80040b6:	d9fa      	bls.n	80040ae <_free_r+0x42>
 80040b8:	6811      	ldr	r1, [r2, #0]
 80040ba:	1850      	adds	r0, r2, r1
 80040bc:	42a0      	cmp	r0, r4
 80040be:	d10b      	bne.n	80040d8 <_free_r+0x6c>
 80040c0:	6820      	ldr	r0, [r4, #0]
 80040c2:	4401      	add	r1, r0
 80040c4:	1850      	adds	r0, r2, r1
 80040c6:	4283      	cmp	r3, r0
 80040c8:	6011      	str	r1, [r2, #0]
 80040ca:	d1e0      	bne.n	800408e <_free_r+0x22>
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4408      	add	r0, r1
 80040d2:	6010      	str	r0, [r2, #0]
 80040d4:	6053      	str	r3, [r2, #4]
 80040d6:	e7da      	b.n	800408e <_free_r+0x22>
 80040d8:	d902      	bls.n	80040e0 <_free_r+0x74>
 80040da:	230c      	movs	r3, #12
 80040dc:	602b      	str	r3, [r5, #0]
 80040de:	e7d6      	b.n	800408e <_free_r+0x22>
 80040e0:	6820      	ldr	r0, [r4, #0]
 80040e2:	1821      	adds	r1, r4, r0
 80040e4:	428b      	cmp	r3, r1
 80040e6:	bf01      	itttt	eq
 80040e8:	6819      	ldreq	r1, [r3, #0]
 80040ea:	685b      	ldreq	r3, [r3, #4]
 80040ec:	1809      	addeq	r1, r1, r0
 80040ee:	6021      	streq	r1, [r4, #0]
 80040f0:	6063      	str	r3, [r4, #4]
 80040f2:	6054      	str	r4, [r2, #4]
 80040f4:	e7cb      	b.n	800408e <_free_r+0x22>
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	20000368 	.word	0x20000368

080040fc <sbrk_aligned>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	4e0e      	ldr	r6, [pc, #56]	; (8004138 <sbrk_aligned+0x3c>)
 8004100:	460c      	mov	r4, r1
 8004102:	6831      	ldr	r1, [r6, #0]
 8004104:	4605      	mov	r5, r0
 8004106:	b911      	cbnz	r1, 800410e <sbrk_aligned+0x12>
 8004108:	f000 fbaa 	bl	8004860 <_sbrk_r>
 800410c:	6030      	str	r0, [r6, #0]
 800410e:	4621      	mov	r1, r4
 8004110:	4628      	mov	r0, r5
 8004112:	f000 fba5 	bl	8004860 <_sbrk_r>
 8004116:	1c43      	adds	r3, r0, #1
 8004118:	d00a      	beq.n	8004130 <sbrk_aligned+0x34>
 800411a:	1cc4      	adds	r4, r0, #3
 800411c:	f024 0403 	bic.w	r4, r4, #3
 8004120:	42a0      	cmp	r0, r4
 8004122:	d007      	beq.n	8004134 <sbrk_aligned+0x38>
 8004124:	1a21      	subs	r1, r4, r0
 8004126:	4628      	mov	r0, r5
 8004128:	f000 fb9a 	bl	8004860 <_sbrk_r>
 800412c:	3001      	adds	r0, #1
 800412e:	d101      	bne.n	8004134 <sbrk_aligned+0x38>
 8004130:	f04f 34ff 	mov.w	r4, #4294967295
 8004134:	4620      	mov	r0, r4
 8004136:	bd70      	pop	{r4, r5, r6, pc}
 8004138:	2000036c 	.word	0x2000036c

0800413c <_malloc_r>:
 800413c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004140:	1ccd      	adds	r5, r1, #3
 8004142:	f025 0503 	bic.w	r5, r5, #3
 8004146:	3508      	adds	r5, #8
 8004148:	2d0c      	cmp	r5, #12
 800414a:	bf38      	it	cc
 800414c:	250c      	movcc	r5, #12
 800414e:	2d00      	cmp	r5, #0
 8004150:	4607      	mov	r7, r0
 8004152:	db01      	blt.n	8004158 <_malloc_r+0x1c>
 8004154:	42a9      	cmp	r1, r5
 8004156:	d905      	bls.n	8004164 <_malloc_r+0x28>
 8004158:	230c      	movs	r3, #12
 800415a:	2600      	movs	r6, #0
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	4630      	mov	r0, r6
 8004160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004164:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004238 <_malloc_r+0xfc>
 8004168:	f000 f868 	bl	800423c <__malloc_lock>
 800416c:	f8d8 3000 	ldr.w	r3, [r8]
 8004170:	461c      	mov	r4, r3
 8004172:	bb5c      	cbnz	r4, 80041cc <_malloc_r+0x90>
 8004174:	4629      	mov	r1, r5
 8004176:	4638      	mov	r0, r7
 8004178:	f7ff ffc0 	bl	80040fc <sbrk_aligned>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	4604      	mov	r4, r0
 8004180:	d155      	bne.n	800422e <_malloc_r+0xf2>
 8004182:	f8d8 4000 	ldr.w	r4, [r8]
 8004186:	4626      	mov	r6, r4
 8004188:	2e00      	cmp	r6, #0
 800418a:	d145      	bne.n	8004218 <_malloc_r+0xdc>
 800418c:	2c00      	cmp	r4, #0
 800418e:	d048      	beq.n	8004222 <_malloc_r+0xe6>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	4631      	mov	r1, r6
 8004194:	4638      	mov	r0, r7
 8004196:	eb04 0903 	add.w	r9, r4, r3
 800419a:	f000 fb61 	bl	8004860 <_sbrk_r>
 800419e:	4581      	cmp	r9, r0
 80041a0:	d13f      	bne.n	8004222 <_malloc_r+0xe6>
 80041a2:	6821      	ldr	r1, [r4, #0]
 80041a4:	4638      	mov	r0, r7
 80041a6:	1a6d      	subs	r5, r5, r1
 80041a8:	4629      	mov	r1, r5
 80041aa:	f7ff ffa7 	bl	80040fc <sbrk_aligned>
 80041ae:	3001      	adds	r0, #1
 80041b0:	d037      	beq.n	8004222 <_malloc_r+0xe6>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	442b      	add	r3, r5
 80041b6:	6023      	str	r3, [r4, #0]
 80041b8:	f8d8 3000 	ldr.w	r3, [r8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d038      	beq.n	8004232 <_malloc_r+0xf6>
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	42a2      	cmp	r2, r4
 80041c4:	d12b      	bne.n	800421e <_malloc_r+0xe2>
 80041c6:	2200      	movs	r2, #0
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	e00f      	b.n	80041ec <_malloc_r+0xb0>
 80041cc:	6822      	ldr	r2, [r4, #0]
 80041ce:	1b52      	subs	r2, r2, r5
 80041d0:	d41f      	bmi.n	8004212 <_malloc_r+0xd6>
 80041d2:	2a0b      	cmp	r2, #11
 80041d4:	d917      	bls.n	8004206 <_malloc_r+0xca>
 80041d6:	1961      	adds	r1, r4, r5
 80041d8:	42a3      	cmp	r3, r4
 80041da:	6025      	str	r5, [r4, #0]
 80041dc:	bf18      	it	ne
 80041de:	6059      	strne	r1, [r3, #4]
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	bf08      	it	eq
 80041e4:	f8c8 1000 	streq.w	r1, [r8]
 80041e8:	5162      	str	r2, [r4, r5]
 80041ea:	604b      	str	r3, [r1, #4]
 80041ec:	4638      	mov	r0, r7
 80041ee:	f104 060b 	add.w	r6, r4, #11
 80041f2:	f000 f829 	bl	8004248 <__malloc_unlock>
 80041f6:	f026 0607 	bic.w	r6, r6, #7
 80041fa:	1d23      	adds	r3, r4, #4
 80041fc:	1af2      	subs	r2, r6, r3
 80041fe:	d0ae      	beq.n	800415e <_malloc_r+0x22>
 8004200:	1b9b      	subs	r3, r3, r6
 8004202:	50a3      	str	r3, [r4, r2]
 8004204:	e7ab      	b.n	800415e <_malloc_r+0x22>
 8004206:	42a3      	cmp	r3, r4
 8004208:	6862      	ldr	r2, [r4, #4]
 800420a:	d1dd      	bne.n	80041c8 <_malloc_r+0x8c>
 800420c:	f8c8 2000 	str.w	r2, [r8]
 8004210:	e7ec      	b.n	80041ec <_malloc_r+0xb0>
 8004212:	4623      	mov	r3, r4
 8004214:	6864      	ldr	r4, [r4, #4]
 8004216:	e7ac      	b.n	8004172 <_malloc_r+0x36>
 8004218:	4634      	mov	r4, r6
 800421a:	6876      	ldr	r6, [r6, #4]
 800421c:	e7b4      	b.n	8004188 <_malloc_r+0x4c>
 800421e:	4613      	mov	r3, r2
 8004220:	e7cc      	b.n	80041bc <_malloc_r+0x80>
 8004222:	230c      	movs	r3, #12
 8004224:	4638      	mov	r0, r7
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	f000 f80e 	bl	8004248 <__malloc_unlock>
 800422c:	e797      	b.n	800415e <_malloc_r+0x22>
 800422e:	6025      	str	r5, [r4, #0]
 8004230:	e7dc      	b.n	80041ec <_malloc_r+0xb0>
 8004232:	605b      	str	r3, [r3, #4]
 8004234:	deff      	udf	#255	; 0xff
 8004236:	bf00      	nop
 8004238:	20000368 	.word	0x20000368

0800423c <__malloc_lock>:
 800423c:	4801      	ldr	r0, [pc, #4]	; (8004244 <__malloc_lock+0x8>)
 800423e:	f7ff bf13 	b.w	8004068 <__retarget_lock_acquire_recursive>
 8004242:	bf00      	nop
 8004244:	20000364 	.word	0x20000364

08004248 <__malloc_unlock>:
 8004248:	4801      	ldr	r0, [pc, #4]	; (8004250 <__malloc_unlock+0x8>)
 800424a:	f7ff bf0e 	b.w	800406a <__retarget_lock_release_recursive>
 800424e:	bf00      	nop
 8004250:	20000364 	.word	0x20000364

08004254 <__ssputs_r>:
 8004254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	461f      	mov	r7, r3
 800425a:	688e      	ldr	r6, [r1, #8]
 800425c:	4682      	mov	sl, r0
 800425e:	42be      	cmp	r6, r7
 8004260:	460c      	mov	r4, r1
 8004262:	4690      	mov	r8, r2
 8004264:	680b      	ldr	r3, [r1, #0]
 8004266:	d82c      	bhi.n	80042c2 <__ssputs_r+0x6e>
 8004268:	898a      	ldrh	r2, [r1, #12]
 800426a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800426e:	d026      	beq.n	80042be <__ssputs_r+0x6a>
 8004270:	6965      	ldr	r5, [r4, #20]
 8004272:	6909      	ldr	r1, [r1, #16]
 8004274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004278:	eba3 0901 	sub.w	r9, r3, r1
 800427c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004280:	1c7b      	adds	r3, r7, #1
 8004282:	444b      	add	r3, r9
 8004284:	106d      	asrs	r5, r5, #1
 8004286:	429d      	cmp	r5, r3
 8004288:	bf38      	it	cc
 800428a:	461d      	movcc	r5, r3
 800428c:	0553      	lsls	r3, r2, #21
 800428e:	d527      	bpl.n	80042e0 <__ssputs_r+0x8c>
 8004290:	4629      	mov	r1, r5
 8004292:	f7ff ff53 	bl	800413c <_malloc_r>
 8004296:	4606      	mov	r6, r0
 8004298:	b360      	cbz	r0, 80042f4 <__ssputs_r+0xa0>
 800429a:	464a      	mov	r2, r9
 800429c:	6921      	ldr	r1, [r4, #16]
 800429e:	f000 fafd 	bl	800489c <memcpy>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ac:	81a3      	strh	r3, [r4, #12]
 80042ae:	6126      	str	r6, [r4, #16]
 80042b0:	444e      	add	r6, r9
 80042b2:	6026      	str	r6, [r4, #0]
 80042b4:	463e      	mov	r6, r7
 80042b6:	6165      	str	r5, [r4, #20]
 80042b8:	eba5 0509 	sub.w	r5, r5, r9
 80042bc:	60a5      	str	r5, [r4, #8]
 80042be:	42be      	cmp	r6, r7
 80042c0:	d900      	bls.n	80042c4 <__ssputs_r+0x70>
 80042c2:	463e      	mov	r6, r7
 80042c4:	4632      	mov	r2, r6
 80042c6:	4641      	mov	r1, r8
 80042c8:	6820      	ldr	r0, [r4, #0]
 80042ca:	f000 faaf 	bl	800482c <memmove>
 80042ce:	2000      	movs	r0, #0
 80042d0:	68a3      	ldr	r3, [r4, #8]
 80042d2:	1b9b      	subs	r3, r3, r6
 80042d4:	60a3      	str	r3, [r4, #8]
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	4433      	add	r3, r6
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e0:	462a      	mov	r2, r5
 80042e2:	f000 fae9 	bl	80048b8 <_realloc_r>
 80042e6:	4606      	mov	r6, r0
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1e0      	bne.n	80042ae <__ssputs_r+0x5a>
 80042ec:	4650      	mov	r0, sl
 80042ee:	6921      	ldr	r1, [r4, #16]
 80042f0:	f7ff febc 	bl	800406c <_free_r>
 80042f4:	230c      	movs	r3, #12
 80042f6:	f8ca 3000 	str.w	r3, [sl]
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004304:	81a3      	strh	r3, [r4, #12]
 8004306:	e7e9      	b.n	80042dc <__ssputs_r+0x88>

08004308 <_svfiprintf_r>:
 8004308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430c:	4698      	mov	r8, r3
 800430e:	898b      	ldrh	r3, [r1, #12]
 8004310:	4607      	mov	r7, r0
 8004312:	061b      	lsls	r3, r3, #24
 8004314:	460d      	mov	r5, r1
 8004316:	4614      	mov	r4, r2
 8004318:	b09d      	sub	sp, #116	; 0x74
 800431a:	d50e      	bpl.n	800433a <_svfiprintf_r+0x32>
 800431c:	690b      	ldr	r3, [r1, #16]
 800431e:	b963      	cbnz	r3, 800433a <_svfiprintf_r+0x32>
 8004320:	2140      	movs	r1, #64	; 0x40
 8004322:	f7ff ff0b 	bl	800413c <_malloc_r>
 8004326:	6028      	str	r0, [r5, #0]
 8004328:	6128      	str	r0, [r5, #16]
 800432a:	b920      	cbnz	r0, 8004336 <_svfiprintf_r+0x2e>
 800432c:	230c      	movs	r3, #12
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	e0d0      	b.n	80044d8 <_svfiprintf_r+0x1d0>
 8004336:	2340      	movs	r3, #64	; 0x40
 8004338:	616b      	str	r3, [r5, #20]
 800433a:	2300      	movs	r3, #0
 800433c:	9309      	str	r3, [sp, #36]	; 0x24
 800433e:	2320      	movs	r3, #32
 8004340:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004344:	2330      	movs	r3, #48	; 0x30
 8004346:	f04f 0901 	mov.w	r9, #1
 800434a:	f8cd 800c 	str.w	r8, [sp, #12]
 800434e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80044f0 <_svfiprintf_r+0x1e8>
 8004352:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004356:	4623      	mov	r3, r4
 8004358:	469a      	mov	sl, r3
 800435a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800435e:	b10a      	cbz	r2, 8004364 <_svfiprintf_r+0x5c>
 8004360:	2a25      	cmp	r2, #37	; 0x25
 8004362:	d1f9      	bne.n	8004358 <_svfiprintf_r+0x50>
 8004364:	ebba 0b04 	subs.w	fp, sl, r4
 8004368:	d00b      	beq.n	8004382 <_svfiprintf_r+0x7a>
 800436a:	465b      	mov	r3, fp
 800436c:	4622      	mov	r2, r4
 800436e:	4629      	mov	r1, r5
 8004370:	4638      	mov	r0, r7
 8004372:	f7ff ff6f 	bl	8004254 <__ssputs_r>
 8004376:	3001      	adds	r0, #1
 8004378:	f000 80a9 	beq.w	80044ce <_svfiprintf_r+0x1c6>
 800437c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800437e:	445a      	add	r2, fp
 8004380:	9209      	str	r2, [sp, #36]	; 0x24
 8004382:	f89a 3000 	ldrb.w	r3, [sl]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80a1 	beq.w	80044ce <_svfiprintf_r+0x1c6>
 800438c:	2300      	movs	r3, #0
 800438e:	f04f 32ff 	mov.w	r2, #4294967295
 8004392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004396:	f10a 0a01 	add.w	sl, sl, #1
 800439a:	9304      	str	r3, [sp, #16]
 800439c:	9307      	str	r3, [sp, #28]
 800439e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043a2:	931a      	str	r3, [sp, #104]	; 0x68
 80043a4:	4654      	mov	r4, sl
 80043a6:	2205      	movs	r2, #5
 80043a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ac:	4850      	ldr	r0, [pc, #320]	; (80044f0 <_svfiprintf_r+0x1e8>)
 80043ae:	f000 fa67 	bl	8004880 <memchr>
 80043b2:	9a04      	ldr	r2, [sp, #16]
 80043b4:	b9d8      	cbnz	r0, 80043ee <_svfiprintf_r+0xe6>
 80043b6:	06d0      	lsls	r0, r2, #27
 80043b8:	bf44      	itt	mi
 80043ba:	2320      	movmi	r3, #32
 80043bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043c0:	0711      	lsls	r1, r2, #28
 80043c2:	bf44      	itt	mi
 80043c4:	232b      	movmi	r3, #43	; 0x2b
 80043c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ca:	f89a 3000 	ldrb.w	r3, [sl]
 80043ce:	2b2a      	cmp	r3, #42	; 0x2a
 80043d0:	d015      	beq.n	80043fe <_svfiprintf_r+0xf6>
 80043d2:	4654      	mov	r4, sl
 80043d4:	2000      	movs	r0, #0
 80043d6:	f04f 0c0a 	mov.w	ip, #10
 80043da:	9a07      	ldr	r2, [sp, #28]
 80043dc:	4621      	mov	r1, r4
 80043de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043e2:	3b30      	subs	r3, #48	; 0x30
 80043e4:	2b09      	cmp	r3, #9
 80043e6:	d94d      	bls.n	8004484 <_svfiprintf_r+0x17c>
 80043e8:	b1b0      	cbz	r0, 8004418 <_svfiprintf_r+0x110>
 80043ea:	9207      	str	r2, [sp, #28]
 80043ec:	e014      	b.n	8004418 <_svfiprintf_r+0x110>
 80043ee:	eba0 0308 	sub.w	r3, r0, r8
 80043f2:	fa09 f303 	lsl.w	r3, r9, r3
 80043f6:	4313      	orrs	r3, r2
 80043f8:	46a2      	mov	sl, r4
 80043fa:	9304      	str	r3, [sp, #16]
 80043fc:	e7d2      	b.n	80043a4 <_svfiprintf_r+0x9c>
 80043fe:	9b03      	ldr	r3, [sp, #12]
 8004400:	1d19      	adds	r1, r3, #4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	9103      	str	r1, [sp, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	bfbb      	ittet	lt
 800440a:	425b      	neglt	r3, r3
 800440c:	f042 0202 	orrlt.w	r2, r2, #2
 8004410:	9307      	strge	r3, [sp, #28]
 8004412:	9307      	strlt	r3, [sp, #28]
 8004414:	bfb8      	it	lt
 8004416:	9204      	strlt	r2, [sp, #16]
 8004418:	7823      	ldrb	r3, [r4, #0]
 800441a:	2b2e      	cmp	r3, #46	; 0x2e
 800441c:	d10c      	bne.n	8004438 <_svfiprintf_r+0x130>
 800441e:	7863      	ldrb	r3, [r4, #1]
 8004420:	2b2a      	cmp	r3, #42	; 0x2a
 8004422:	d134      	bne.n	800448e <_svfiprintf_r+0x186>
 8004424:	9b03      	ldr	r3, [sp, #12]
 8004426:	3402      	adds	r4, #2
 8004428:	1d1a      	adds	r2, r3, #4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	9203      	str	r2, [sp, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	bfb8      	it	lt
 8004432:	f04f 33ff 	movlt.w	r3, #4294967295
 8004436:	9305      	str	r3, [sp, #20]
 8004438:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80044f4 <_svfiprintf_r+0x1ec>
 800443c:	2203      	movs	r2, #3
 800443e:	4650      	mov	r0, sl
 8004440:	7821      	ldrb	r1, [r4, #0]
 8004442:	f000 fa1d 	bl	8004880 <memchr>
 8004446:	b138      	cbz	r0, 8004458 <_svfiprintf_r+0x150>
 8004448:	2240      	movs	r2, #64	; 0x40
 800444a:	9b04      	ldr	r3, [sp, #16]
 800444c:	eba0 000a 	sub.w	r0, r0, sl
 8004450:	4082      	lsls	r2, r0
 8004452:	4313      	orrs	r3, r2
 8004454:	3401      	adds	r4, #1
 8004456:	9304      	str	r3, [sp, #16]
 8004458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800445c:	2206      	movs	r2, #6
 800445e:	4826      	ldr	r0, [pc, #152]	; (80044f8 <_svfiprintf_r+0x1f0>)
 8004460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004464:	f000 fa0c 	bl	8004880 <memchr>
 8004468:	2800      	cmp	r0, #0
 800446a:	d038      	beq.n	80044de <_svfiprintf_r+0x1d6>
 800446c:	4b23      	ldr	r3, [pc, #140]	; (80044fc <_svfiprintf_r+0x1f4>)
 800446e:	bb1b      	cbnz	r3, 80044b8 <_svfiprintf_r+0x1b0>
 8004470:	9b03      	ldr	r3, [sp, #12]
 8004472:	3307      	adds	r3, #7
 8004474:	f023 0307 	bic.w	r3, r3, #7
 8004478:	3308      	adds	r3, #8
 800447a:	9303      	str	r3, [sp, #12]
 800447c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800447e:	4433      	add	r3, r6
 8004480:	9309      	str	r3, [sp, #36]	; 0x24
 8004482:	e768      	b.n	8004356 <_svfiprintf_r+0x4e>
 8004484:	460c      	mov	r4, r1
 8004486:	2001      	movs	r0, #1
 8004488:	fb0c 3202 	mla	r2, ip, r2, r3
 800448c:	e7a6      	b.n	80043dc <_svfiprintf_r+0xd4>
 800448e:	2300      	movs	r3, #0
 8004490:	f04f 0c0a 	mov.w	ip, #10
 8004494:	4619      	mov	r1, r3
 8004496:	3401      	adds	r4, #1
 8004498:	9305      	str	r3, [sp, #20]
 800449a:	4620      	mov	r0, r4
 800449c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044a0:	3a30      	subs	r2, #48	; 0x30
 80044a2:	2a09      	cmp	r2, #9
 80044a4:	d903      	bls.n	80044ae <_svfiprintf_r+0x1a6>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0c6      	beq.n	8004438 <_svfiprintf_r+0x130>
 80044aa:	9105      	str	r1, [sp, #20]
 80044ac:	e7c4      	b.n	8004438 <_svfiprintf_r+0x130>
 80044ae:	4604      	mov	r4, r0
 80044b0:	2301      	movs	r3, #1
 80044b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80044b6:	e7f0      	b.n	800449a <_svfiprintf_r+0x192>
 80044b8:	ab03      	add	r3, sp, #12
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	462a      	mov	r2, r5
 80044be:	4638      	mov	r0, r7
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <_svfiprintf_r+0x1f8>)
 80044c2:	a904      	add	r1, sp, #16
 80044c4:	f3af 8000 	nop.w
 80044c8:	1c42      	adds	r2, r0, #1
 80044ca:	4606      	mov	r6, r0
 80044cc:	d1d6      	bne.n	800447c <_svfiprintf_r+0x174>
 80044ce:	89ab      	ldrh	r3, [r5, #12]
 80044d0:	065b      	lsls	r3, r3, #25
 80044d2:	f53f af2d 	bmi.w	8004330 <_svfiprintf_r+0x28>
 80044d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044d8:	b01d      	add	sp, #116	; 0x74
 80044da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044de:	ab03      	add	r3, sp, #12
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	462a      	mov	r2, r5
 80044e4:	4638      	mov	r0, r7
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <_svfiprintf_r+0x1f8>)
 80044e8:	a904      	add	r1, sp, #16
 80044ea:	f000 f87d 	bl	80045e8 <_printf_i>
 80044ee:	e7eb      	b.n	80044c8 <_svfiprintf_r+0x1c0>
 80044f0:	08004982 	.word	0x08004982
 80044f4:	08004988 	.word	0x08004988
 80044f8:	0800498c 	.word	0x0800498c
 80044fc:	00000000 	.word	0x00000000
 8004500:	08004255 	.word	0x08004255

08004504 <_printf_common>:
 8004504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	4616      	mov	r6, r2
 800450a:	4699      	mov	r9, r3
 800450c:	688a      	ldr	r2, [r1, #8]
 800450e:	690b      	ldr	r3, [r1, #16]
 8004510:	4607      	mov	r7, r0
 8004512:	4293      	cmp	r3, r2
 8004514:	bfb8      	it	lt
 8004516:	4613      	movlt	r3, r2
 8004518:	6033      	str	r3, [r6, #0]
 800451a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800451e:	460c      	mov	r4, r1
 8004520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004524:	b10a      	cbz	r2, 800452a <_printf_common+0x26>
 8004526:	3301      	adds	r3, #1
 8004528:	6033      	str	r3, [r6, #0]
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	0699      	lsls	r1, r3, #26
 800452e:	bf42      	ittt	mi
 8004530:	6833      	ldrmi	r3, [r6, #0]
 8004532:	3302      	addmi	r3, #2
 8004534:	6033      	strmi	r3, [r6, #0]
 8004536:	6825      	ldr	r5, [r4, #0]
 8004538:	f015 0506 	ands.w	r5, r5, #6
 800453c:	d106      	bne.n	800454c <_printf_common+0x48>
 800453e:	f104 0a19 	add.w	sl, r4, #25
 8004542:	68e3      	ldr	r3, [r4, #12]
 8004544:	6832      	ldr	r2, [r6, #0]
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	42ab      	cmp	r3, r5
 800454a:	dc2b      	bgt.n	80045a4 <_printf_common+0xa0>
 800454c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004550:	1e13      	subs	r3, r2, #0
 8004552:	6822      	ldr	r2, [r4, #0]
 8004554:	bf18      	it	ne
 8004556:	2301      	movne	r3, #1
 8004558:	0692      	lsls	r2, r2, #26
 800455a:	d430      	bmi.n	80045be <_printf_common+0xba>
 800455c:	4649      	mov	r1, r9
 800455e:	4638      	mov	r0, r7
 8004560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004564:	47c0      	blx	r8
 8004566:	3001      	adds	r0, #1
 8004568:	d023      	beq.n	80045b2 <_printf_common+0xae>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	6922      	ldr	r2, [r4, #16]
 800456e:	f003 0306 	and.w	r3, r3, #6
 8004572:	2b04      	cmp	r3, #4
 8004574:	bf14      	ite	ne
 8004576:	2500      	movne	r5, #0
 8004578:	6833      	ldreq	r3, [r6, #0]
 800457a:	f04f 0600 	mov.w	r6, #0
 800457e:	bf08      	it	eq
 8004580:	68e5      	ldreq	r5, [r4, #12]
 8004582:	f104 041a 	add.w	r4, r4, #26
 8004586:	bf08      	it	eq
 8004588:	1aed      	subeq	r5, r5, r3
 800458a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800458e:	bf08      	it	eq
 8004590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004594:	4293      	cmp	r3, r2
 8004596:	bfc4      	itt	gt
 8004598:	1a9b      	subgt	r3, r3, r2
 800459a:	18ed      	addgt	r5, r5, r3
 800459c:	42b5      	cmp	r5, r6
 800459e:	d11a      	bne.n	80045d6 <_printf_common+0xd2>
 80045a0:	2000      	movs	r0, #0
 80045a2:	e008      	b.n	80045b6 <_printf_common+0xb2>
 80045a4:	2301      	movs	r3, #1
 80045a6:	4652      	mov	r2, sl
 80045a8:	4649      	mov	r1, r9
 80045aa:	4638      	mov	r0, r7
 80045ac:	47c0      	blx	r8
 80045ae:	3001      	adds	r0, #1
 80045b0:	d103      	bne.n	80045ba <_printf_common+0xb6>
 80045b2:	f04f 30ff 	mov.w	r0, #4294967295
 80045b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ba:	3501      	adds	r5, #1
 80045bc:	e7c1      	b.n	8004542 <_printf_common+0x3e>
 80045be:	2030      	movs	r0, #48	; 0x30
 80045c0:	18e1      	adds	r1, r4, r3
 80045c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045cc:	4422      	add	r2, r4
 80045ce:	3302      	adds	r3, #2
 80045d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045d4:	e7c2      	b.n	800455c <_printf_common+0x58>
 80045d6:	2301      	movs	r3, #1
 80045d8:	4622      	mov	r2, r4
 80045da:	4649      	mov	r1, r9
 80045dc:	4638      	mov	r0, r7
 80045de:	47c0      	blx	r8
 80045e0:	3001      	adds	r0, #1
 80045e2:	d0e6      	beq.n	80045b2 <_printf_common+0xae>
 80045e4:	3601      	adds	r6, #1
 80045e6:	e7d9      	b.n	800459c <_printf_common+0x98>

080045e8 <_printf_i>:
 80045e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045ec:	7e0f      	ldrb	r7, [r1, #24]
 80045ee:	4691      	mov	r9, r2
 80045f0:	2f78      	cmp	r7, #120	; 0x78
 80045f2:	4680      	mov	r8, r0
 80045f4:	460c      	mov	r4, r1
 80045f6:	469a      	mov	sl, r3
 80045f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045fe:	d807      	bhi.n	8004610 <_printf_i+0x28>
 8004600:	2f62      	cmp	r7, #98	; 0x62
 8004602:	d80a      	bhi.n	800461a <_printf_i+0x32>
 8004604:	2f00      	cmp	r7, #0
 8004606:	f000 80d5 	beq.w	80047b4 <_printf_i+0x1cc>
 800460a:	2f58      	cmp	r7, #88	; 0x58
 800460c:	f000 80c1 	beq.w	8004792 <_printf_i+0x1aa>
 8004610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004618:	e03a      	b.n	8004690 <_printf_i+0xa8>
 800461a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800461e:	2b15      	cmp	r3, #21
 8004620:	d8f6      	bhi.n	8004610 <_printf_i+0x28>
 8004622:	a101      	add	r1, pc, #4	; (adr r1, 8004628 <_printf_i+0x40>)
 8004624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004628:	08004681 	.word	0x08004681
 800462c:	08004695 	.word	0x08004695
 8004630:	08004611 	.word	0x08004611
 8004634:	08004611 	.word	0x08004611
 8004638:	08004611 	.word	0x08004611
 800463c:	08004611 	.word	0x08004611
 8004640:	08004695 	.word	0x08004695
 8004644:	08004611 	.word	0x08004611
 8004648:	08004611 	.word	0x08004611
 800464c:	08004611 	.word	0x08004611
 8004650:	08004611 	.word	0x08004611
 8004654:	0800479b 	.word	0x0800479b
 8004658:	080046c1 	.word	0x080046c1
 800465c:	08004755 	.word	0x08004755
 8004660:	08004611 	.word	0x08004611
 8004664:	08004611 	.word	0x08004611
 8004668:	080047bd 	.word	0x080047bd
 800466c:	08004611 	.word	0x08004611
 8004670:	080046c1 	.word	0x080046c1
 8004674:	08004611 	.word	0x08004611
 8004678:	08004611 	.word	0x08004611
 800467c:	0800475d 	.word	0x0800475d
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	1d1a      	adds	r2, r3, #4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	602a      	str	r2, [r5, #0]
 8004688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800468c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004690:	2301      	movs	r3, #1
 8004692:	e0a0      	b.n	80047d6 <_printf_i+0x1ee>
 8004694:	6820      	ldr	r0, [r4, #0]
 8004696:	682b      	ldr	r3, [r5, #0]
 8004698:	0607      	lsls	r7, r0, #24
 800469a:	f103 0104 	add.w	r1, r3, #4
 800469e:	6029      	str	r1, [r5, #0]
 80046a0:	d501      	bpl.n	80046a6 <_printf_i+0xbe>
 80046a2:	681e      	ldr	r6, [r3, #0]
 80046a4:	e003      	b.n	80046ae <_printf_i+0xc6>
 80046a6:	0646      	lsls	r6, r0, #25
 80046a8:	d5fb      	bpl.n	80046a2 <_printf_i+0xba>
 80046aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046ae:	2e00      	cmp	r6, #0
 80046b0:	da03      	bge.n	80046ba <_printf_i+0xd2>
 80046b2:	232d      	movs	r3, #45	; 0x2d
 80046b4:	4276      	negs	r6, r6
 80046b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ba:	230a      	movs	r3, #10
 80046bc:	4859      	ldr	r0, [pc, #356]	; (8004824 <_printf_i+0x23c>)
 80046be:	e012      	b.n	80046e6 <_printf_i+0xfe>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	6820      	ldr	r0, [r4, #0]
 80046c4:	1d19      	adds	r1, r3, #4
 80046c6:	6029      	str	r1, [r5, #0]
 80046c8:	0605      	lsls	r5, r0, #24
 80046ca:	d501      	bpl.n	80046d0 <_printf_i+0xe8>
 80046cc:	681e      	ldr	r6, [r3, #0]
 80046ce:	e002      	b.n	80046d6 <_printf_i+0xee>
 80046d0:	0641      	lsls	r1, r0, #25
 80046d2:	d5fb      	bpl.n	80046cc <_printf_i+0xe4>
 80046d4:	881e      	ldrh	r6, [r3, #0]
 80046d6:	2f6f      	cmp	r7, #111	; 0x6f
 80046d8:	bf0c      	ite	eq
 80046da:	2308      	moveq	r3, #8
 80046dc:	230a      	movne	r3, #10
 80046de:	4851      	ldr	r0, [pc, #324]	; (8004824 <_printf_i+0x23c>)
 80046e0:	2100      	movs	r1, #0
 80046e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046e6:	6865      	ldr	r5, [r4, #4]
 80046e8:	2d00      	cmp	r5, #0
 80046ea:	bfa8      	it	ge
 80046ec:	6821      	ldrge	r1, [r4, #0]
 80046ee:	60a5      	str	r5, [r4, #8]
 80046f0:	bfa4      	itt	ge
 80046f2:	f021 0104 	bicge.w	r1, r1, #4
 80046f6:	6021      	strge	r1, [r4, #0]
 80046f8:	b90e      	cbnz	r6, 80046fe <_printf_i+0x116>
 80046fa:	2d00      	cmp	r5, #0
 80046fc:	d04b      	beq.n	8004796 <_printf_i+0x1ae>
 80046fe:	4615      	mov	r5, r2
 8004700:	fbb6 f1f3 	udiv	r1, r6, r3
 8004704:	fb03 6711 	mls	r7, r3, r1, r6
 8004708:	5dc7      	ldrb	r7, [r0, r7]
 800470a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800470e:	4637      	mov	r7, r6
 8004710:	42bb      	cmp	r3, r7
 8004712:	460e      	mov	r6, r1
 8004714:	d9f4      	bls.n	8004700 <_printf_i+0x118>
 8004716:	2b08      	cmp	r3, #8
 8004718:	d10b      	bne.n	8004732 <_printf_i+0x14a>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	07de      	lsls	r6, r3, #31
 800471e:	d508      	bpl.n	8004732 <_printf_i+0x14a>
 8004720:	6923      	ldr	r3, [r4, #16]
 8004722:	6861      	ldr	r1, [r4, #4]
 8004724:	4299      	cmp	r1, r3
 8004726:	bfde      	ittt	le
 8004728:	2330      	movle	r3, #48	; 0x30
 800472a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800472e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004732:	1b52      	subs	r2, r2, r5
 8004734:	6122      	str	r2, [r4, #16]
 8004736:	464b      	mov	r3, r9
 8004738:	4621      	mov	r1, r4
 800473a:	4640      	mov	r0, r8
 800473c:	f8cd a000 	str.w	sl, [sp]
 8004740:	aa03      	add	r2, sp, #12
 8004742:	f7ff fedf 	bl	8004504 <_printf_common>
 8004746:	3001      	adds	r0, #1
 8004748:	d14a      	bne.n	80047e0 <_printf_i+0x1f8>
 800474a:	f04f 30ff 	mov.w	r0, #4294967295
 800474e:	b004      	add	sp, #16
 8004750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	f043 0320 	orr.w	r3, r3, #32
 800475a:	6023      	str	r3, [r4, #0]
 800475c:	2778      	movs	r7, #120	; 0x78
 800475e:	4832      	ldr	r0, [pc, #200]	; (8004828 <_printf_i+0x240>)
 8004760:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	6829      	ldr	r1, [r5, #0]
 8004768:	061f      	lsls	r7, r3, #24
 800476a:	f851 6b04 	ldr.w	r6, [r1], #4
 800476e:	d402      	bmi.n	8004776 <_printf_i+0x18e>
 8004770:	065f      	lsls	r7, r3, #25
 8004772:	bf48      	it	mi
 8004774:	b2b6      	uxthmi	r6, r6
 8004776:	07df      	lsls	r7, r3, #31
 8004778:	bf48      	it	mi
 800477a:	f043 0320 	orrmi.w	r3, r3, #32
 800477e:	6029      	str	r1, [r5, #0]
 8004780:	bf48      	it	mi
 8004782:	6023      	strmi	r3, [r4, #0]
 8004784:	b91e      	cbnz	r6, 800478e <_printf_i+0x1a6>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	f023 0320 	bic.w	r3, r3, #32
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	2310      	movs	r3, #16
 8004790:	e7a6      	b.n	80046e0 <_printf_i+0xf8>
 8004792:	4824      	ldr	r0, [pc, #144]	; (8004824 <_printf_i+0x23c>)
 8004794:	e7e4      	b.n	8004760 <_printf_i+0x178>
 8004796:	4615      	mov	r5, r2
 8004798:	e7bd      	b.n	8004716 <_printf_i+0x12e>
 800479a:	682b      	ldr	r3, [r5, #0]
 800479c:	6826      	ldr	r6, [r4, #0]
 800479e:	1d18      	adds	r0, r3, #4
 80047a0:	6961      	ldr	r1, [r4, #20]
 80047a2:	6028      	str	r0, [r5, #0]
 80047a4:	0635      	lsls	r5, r6, #24
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	d501      	bpl.n	80047ae <_printf_i+0x1c6>
 80047aa:	6019      	str	r1, [r3, #0]
 80047ac:	e002      	b.n	80047b4 <_printf_i+0x1cc>
 80047ae:	0670      	lsls	r0, r6, #25
 80047b0:	d5fb      	bpl.n	80047aa <_printf_i+0x1c2>
 80047b2:	8019      	strh	r1, [r3, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	4615      	mov	r5, r2
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	e7bc      	b.n	8004736 <_printf_i+0x14e>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	2100      	movs	r1, #0
 80047c0:	1d1a      	adds	r2, r3, #4
 80047c2:	602a      	str	r2, [r5, #0]
 80047c4:	681d      	ldr	r5, [r3, #0]
 80047c6:	6862      	ldr	r2, [r4, #4]
 80047c8:	4628      	mov	r0, r5
 80047ca:	f000 f859 	bl	8004880 <memchr>
 80047ce:	b108      	cbz	r0, 80047d4 <_printf_i+0x1ec>
 80047d0:	1b40      	subs	r0, r0, r5
 80047d2:	6060      	str	r0, [r4, #4]
 80047d4:	6863      	ldr	r3, [r4, #4]
 80047d6:	6123      	str	r3, [r4, #16]
 80047d8:	2300      	movs	r3, #0
 80047da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047de:	e7aa      	b.n	8004736 <_printf_i+0x14e>
 80047e0:	462a      	mov	r2, r5
 80047e2:	4649      	mov	r1, r9
 80047e4:	4640      	mov	r0, r8
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	47d0      	blx	sl
 80047ea:	3001      	adds	r0, #1
 80047ec:	d0ad      	beq.n	800474a <_printf_i+0x162>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	079b      	lsls	r3, r3, #30
 80047f2:	d413      	bmi.n	800481c <_printf_i+0x234>
 80047f4:	68e0      	ldr	r0, [r4, #12]
 80047f6:	9b03      	ldr	r3, [sp, #12]
 80047f8:	4298      	cmp	r0, r3
 80047fa:	bfb8      	it	lt
 80047fc:	4618      	movlt	r0, r3
 80047fe:	e7a6      	b.n	800474e <_printf_i+0x166>
 8004800:	2301      	movs	r3, #1
 8004802:	4632      	mov	r2, r6
 8004804:	4649      	mov	r1, r9
 8004806:	4640      	mov	r0, r8
 8004808:	47d0      	blx	sl
 800480a:	3001      	adds	r0, #1
 800480c:	d09d      	beq.n	800474a <_printf_i+0x162>
 800480e:	3501      	adds	r5, #1
 8004810:	68e3      	ldr	r3, [r4, #12]
 8004812:	9903      	ldr	r1, [sp, #12]
 8004814:	1a5b      	subs	r3, r3, r1
 8004816:	42ab      	cmp	r3, r5
 8004818:	dcf2      	bgt.n	8004800 <_printf_i+0x218>
 800481a:	e7eb      	b.n	80047f4 <_printf_i+0x20c>
 800481c:	2500      	movs	r5, #0
 800481e:	f104 0619 	add.w	r6, r4, #25
 8004822:	e7f5      	b.n	8004810 <_printf_i+0x228>
 8004824:	08004993 	.word	0x08004993
 8004828:	080049a4 	.word	0x080049a4

0800482c <memmove>:
 800482c:	4288      	cmp	r0, r1
 800482e:	b510      	push	{r4, lr}
 8004830:	eb01 0402 	add.w	r4, r1, r2
 8004834:	d902      	bls.n	800483c <memmove+0x10>
 8004836:	4284      	cmp	r4, r0
 8004838:	4623      	mov	r3, r4
 800483a:	d807      	bhi.n	800484c <memmove+0x20>
 800483c:	1e43      	subs	r3, r0, #1
 800483e:	42a1      	cmp	r1, r4
 8004840:	d008      	beq.n	8004854 <memmove+0x28>
 8004842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800484a:	e7f8      	b.n	800483e <memmove+0x12>
 800484c:	4601      	mov	r1, r0
 800484e:	4402      	add	r2, r0
 8004850:	428a      	cmp	r2, r1
 8004852:	d100      	bne.n	8004856 <memmove+0x2a>
 8004854:	bd10      	pop	{r4, pc}
 8004856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800485a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800485e:	e7f7      	b.n	8004850 <memmove+0x24>

08004860 <_sbrk_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	2300      	movs	r3, #0
 8004864:	4d05      	ldr	r5, [pc, #20]	; (800487c <_sbrk_r+0x1c>)
 8004866:	4604      	mov	r4, r0
 8004868:	4608      	mov	r0, r1
 800486a:	602b      	str	r3, [r5, #0]
 800486c:	f7fc fb80 	bl	8000f70 <_sbrk>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	d102      	bne.n	800487a <_sbrk_r+0x1a>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	b103      	cbz	r3, 800487a <_sbrk_r+0x1a>
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	bd38      	pop	{r3, r4, r5, pc}
 800487c:	20000360 	.word	0x20000360

08004880 <memchr>:
 8004880:	4603      	mov	r3, r0
 8004882:	b510      	push	{r4, lr}
 8004884:	b2c9      	uxtb	r1, r1
 8004886:	4402      	add	r2, r0
 8004888:	4293      	cmp	r3, r2
 800488a:	4618      	mov	r0, r3
 800488c:	d101      	bne.n	8004892 <memchr+0x12>
 800488e:	2000      	movs	r0, #0
 8004890:	e003      	b.n	800489a <memchr+0x1a>
 8004892:	7804      	ldrb	r4, [r0, #0]
 8004894:	3301      	adds	r3, #1
 8004896:	428c      	cmp	r4, r1
 8004898:	d1f6      	bne.n	8004888 <memchr+0x8>
 800489a:	bd10      	pop	{r4, pc}

0800489c <memcpy>:
 800489c:	440a      	add	r2, r1
 800489e:	4291      	cmp	r1, r2
 80048a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80048a4:	d100      	bne.n	80048a8 <memcpy+0xc>
 80048a6:	4770      	bx	lr
 80048a8:	b510      	push	{r4, lr}
 80048aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ae:	4291      	cmp	r1, r2
 80048b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048b4:	d1f9      	bne.n	80048aa <memcpy+0xe>
 80048b6:	bd10      	pop	{r4, pc}

080048b8 <_realloc_r>:
 80048b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048bc:	4680      	mov	r8, r0
 80048be:	4614      	mov	r4, r2
 80048c0:	460e      	mov	r6, r1
 80048c2:	b921      	cbnz	r1, 80048ce <_realloc_r+0x16>
 80048c4:	4611      	mov	r1, r2
 80048c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048ca:	f7ff bc37 	b.w	800413c <_malloc_r>
 80048ce:	b92a      	cbnz	r2, 80048dc <_realloc_r+0x24>
 80048d0:	f7ff fbcc 	bl	800406c <_free_r>
 80048d4:	4625      	mov	r5, r4
 80048d6:	4628      	mov	r0, r5
 80048d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048dc:	f000 f81b 	bl	8004916 <_malloc_usable_size_r>
 80048e0:	4284      	cmp	r4, r0
 80048e2:	4607      	mov	r7, r0
 80048e4:	d802      	bhi.n	80048ec <_realloc_r+0x34>
 80048e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048ea:	d812      	bhi.n	8004912 <_realloc_r+0x5a>
 80048ec:	4621      	mov	r1, r4
 80048ee:	4640      	mov	r0, r8
 80048f0:	f7ff fc24 	bl	800413c <_malloc_r>
 80048f4:	4605      	mov	r5, r0
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d0ed      	beq.n	80048d6 <_realloc_r+0x1e>
 80048fa:	42bc      	cmp	r4, r7
 80048fc:	4622      	mov	r2, r4
 80048fe:	4631      	mov	r1, r6
 8004900:	bf28      	it	cs
 8004902:	463a      	movcs	r2, r7
 8004904:	f7ff ffca 	bl	800489c <memcpy>
 8004908:	4631      	mov	r1, r6
 800490a:	4640      	mov	r0, r8
 800490c:	f7ff fbae 	bl	800406c <_free_r>
 8004910:	e7e1      	b.n	80048d6 <_realloc_r+0x1e>
 8004912:	4635      	mov	r5, r6
 8004914:	e7df      	b.n	80048d6 <_realloc_r+0x1e>

08004916 <_malloc_usable_size_r>:
 8004916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800491a:	1f18      	subs	r0, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	bfbc      	itt	lt
 8004920:	580b      	ldrlt	r3, [r1, r0]
 8004922:	18c0      	addlt	r0, r0, r3
 8004924:	4770      	bx	lr
	...

08004928 <_init>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	bf00      	nop
 800492c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492e:	bc08      	pop	{r3}
 8004930:	469e      	mov	lr, r3
 8004932:	4770      	bx	lr

08004934 <_fini>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	bf00      	nop
 8004938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493a:	bc08      	pop	{r3}
 800493c:	469e      	mov	lr, r3
 800493e:	4770      	bx	lr
